// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct CustomFieldValue {
    // message fields
    pub field_id: ::std::string::String,
    // message oneof groups
    pub value: ::std::option::Option<CustomFieldValue_oneof_value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CustomFieldValue {
    fn default() -> &'a CustomFieldValue {
        <CustomFieldValue as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum CustomFieldValue_oneof_value {
    string_value(::std::string::String),
    int_value(i32),
    float_value(f64),
    bool_value(bool),
}

impl CustomFieldValue {
    pub fn new() -> CustomFieldValue {
        ::std::default::Default::default()
    }

    // string field_id = 1;


    pub fn get_field_id(&self) -> &str {
        &self.field_id
    }
    pub fn clear_field_id(&mut self) {
        self.field_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_id(&mut self, v: ::std::string::String) {
        self.field_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_id(&mut self) -> &mut ::std::string::String {
        &mut self.field_id
    }

    // Take field
    pub fn take_field_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_id, ::std::string::String::new())
    }

    // string string_value = 2;


    pub fn get_string_value(&self) -> &str {
        match self.value {
            ::std::option::Option::Some(CustomFieldValue_oneof_value::string_value(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_string_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_string_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(CustomFieldValue_oneof_value::string_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_value(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(CustomFieldValue_oneof_value::string_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_value(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(CustomFieldValue_oneof_value::string_value(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(CustomFieldValue_oneof_value::string_value(::std::string::String::new()));
        }
        match self.value {
            ::std::option::Option::Some(CustomFieldValue_oneof_value::string_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_value(&mut self) -> ::std::string::String {
        if self.has_string_value() {
            match self.value.take() {
                ::std::option::Option::Some(CustomFieldValue_oneof_value::string_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // sint32 int_value = 3;


    pub fn get_int_value(&self) -> i32 {
        match self.value {
            ::std::option::Option::Some(CustomFieldValue_oneof_value::int_value(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_int_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_int_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(CustomFieldValue_oneof_value::int_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int_value(&mut self, v: i32) {
        self.value = ::std::option::Option::Some(CustomFieldValue_oneof_value::int_value(v))
    }

    // double float_value = 4;


    pub fn get_float_value(&self) -> f64 {
        match self.value {
            ::std::option::Option::Some(CustomFieldValue_oneof_value::float_value(v)) => v,
            _ => 0.,
        }
    }
    pub fn clear_float_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_float_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(CustomFieldValue_oneof_value::float_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_float_value(&mut self, v: f64) {
        self.value = ::std::option::Option::Some(CustomFieldValue_oneof_value::float_value(v))
    }

    // bool bool_value = 5;


    pub fn get_bool_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(CustomFieldValue_oneof_value::bool_value(v)) => v,
            _ => false,
        }
    }
    pub fn clear_bool_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_bool_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(CustomFieldValue_oneof_value::bool_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bool_value(&mut self, v: bool) {
        self.value = ::std::option::Option::Some(CustomFieldValue_oneof_value::bool_value(v))
    }
}

impl ::protobuf::Message for CustomFieldValue {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(CustomFieldValue_oneof_value::string_value(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(CustomFieldValue_oneof_value::int_value(is.read_sint32()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(CustomFieldValue_oneof_value::float_value(is.read_double()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(CustomFieldValue_oneof_value::bool_value(is.read_bool()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_id);
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &CustomFieldValue_oneof_value::string_value(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &CustomFieldValue_oneof_value::int_value(v) => {
                    my_size += ::protobuf::rt::value_varint_zigzag_size(3, v);
                },
                &CustomFieldValue_oneof_value::float_value(v) => {
                    my_size += 9;
                },
                &CustomFieldValue_oneof_value::bool_value(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_id.is_empty() {
            os.write_string(1, &self.field_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &CustomFieldValue_oneof_value::string_value(ref v) => {
                    os.write_string(2, v)?;
                },
                &CustomFieldValue_oneof_value::int_value(v) => {
                    os.write_sint32(3, v)?;
                },
                &CustomFieldValue_oneof_value::float_value(v) => {
                    os.write_double(4, v)?;
                },
                &CustomFieldValue_oneof_value::bool_value(v) => {
                    os.write_bool(5, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CustomFieldValue {
        CustomFieldValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "field_id",
                |m: &CustomFieldValue| { &m.field_id },
                |m: &mut CustomFieldValue| { &mut m.field_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "string_value",
                CustomFieldValue::has_string_value,
                CustomFieldValue::get_string_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "int_value",
                CustomFieldValue::has_int_value,
                CustomFieldValue::get_int_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor::<_>(
                "float_value",
                CustomFieldValue::has_float_value,
                CustomFieldValue::get_float_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "bool_value",
                CustomFieldValue::has_bool_value,
                CustomFieldValue::get_bool_value,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CustomFieldValue>(
                "CustomFieldValue",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CustomFieldValue {
        static instance: ::protobuf::rt::LazyV2<CustomFieldValue> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CustomFieldValue::new)
    }
}

impl ::protobuf::Clear for CustomFieldValue {
    fn clear(&mut self) {
        self.field_id.clear();
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CustomFieldValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomFieldValue {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SundryThings {
    // message fields
    pub favorite: bool,
    pub rating: Rating,
    pub custom_fields: ::protobuf::RepeatedField<CustomFieldValue>,
    pub tag_ids: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SundryThings {
    fn default() -> &'a SundryThings {
        <SundryThings as ::protobuf::Message>::default_instance()
    }
}

impl SundryThings {
    pub fn new() -> SundryThings {
        ::std::default::Default::default()
    }

    // bool favorite = 1;


    pub fn get_favorite(&self) -> bool {
        self.favorite
    }
    pub fn clear_favorite(&mut self) {
        self.favorite = false;
    }

    // Param is passed by value, moved
    pub fn set_favorite(&mut self, v: bool) {
        self.favorite = v;
    }

    // .Rating rating = 2;


    pub fn get_rating(&self) -> Rating {
        self.rating
    }
    pub fn clear_rating(&mut self) {
        self.rating = Rating::NONE;
    }

    // Param is passed by value, moved
    pub fn set_rating(&mut self, v: Rating) {
        self.rating = v;
    }

    // repeated .CustomFieldValue custom_fields = 3;


    pub fn get_custom_fields(&self) -> &[CustomFieldValue] {
        &self.custom_fields
    }
    pub fn clear_custom_fields(&mut self) {
        self.custom_fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom_fields(&mut self, v: ::protobuf::RepeatedField<CustomFieldValue>) {
        self.custom_fields = v;
    }

    // Mutable pointer to the field.
    pub fn mut_custom_fields(&mut self) -> &mut ::protobuf::RepeatedField<CustomFieldValue> {
        &mut self.custom_fields
    }

    // Take field
    pub fn take_custom_fields(&mut self) -> ::protobuf::RepeatedField<CustomFieldValue> {
        ::std::mem::replace(&mut self.custom_fields, ::protobuf::RepeatedField::new())
    }

    // repeated string tag_ids = 4;


    pub fn get_tag_ids(&self) -> &[::std::string::String] {
        &self.tag_ids
    }
    pub fn clear_tag_ids(&mut self) {
        self.tag_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_tag_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.tag_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tag_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.tag_ids
    }

    // Take field
    pub fn take_tag_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.tag_ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SundryThings {
    fn is_initialized(&self) -> bool {
        for v in &self.custom_fields {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.favorite = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.rating, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.custom_fields)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tag_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.favorite != false {
            my_size += 2;
        }
        if self.rating != Rating::NONE {
            my_size += ::protobuf::rt::enum_size(2, self.rating);
        }
        for value in &self.custom_fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.tag_ids {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.favorite != false {
            os.write_bool(1, self.favorite)?;
        }
        if self.rating != Rating::NONE {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.rating))?;
        }
        for v in &self.custom_fields {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.tag_ids {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SundryThings {
        SundryThings::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "favorite",
                |m: &SundryThings| { &m.favorite },
                |m: &mut SundryThings| { &mut m.favorite },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Rating>>(
                "rating",
                |m: &SundryThings| { &m.rating },
                |m: &mut SundryThings| { &mut m.rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CustomFieldValue>>(
                "custom_fields",
                |m: &SundryThings| { &m.custom_fields },
                |m: &mut SundryThings| { &mut m.custom_fields },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tag_ids",
                |m: &SundryThings| { &m.tag_ids },
                |m: &mut SundryThings| { &mut m.tag_ids },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SundryThings>(
                "SundryThings",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SundryThings {
        static instance: ::protobuf::rt::LazyV2<SundryThings> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SundryThings::new)
    }
}

impl ::protobuf::Clear for SundryThings {
    fn clear(&mut self) {
        self.favorite = false;
        self.rating = Rating::NONE;
        self.custom_fields.clear();
        self.tag_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SundryThings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SundryThings {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Gender {
    // message fields
    pub gender: Gender_GenderBasic,
    pub gender_other: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Gender {
    fn default() -> &'a Gender {
        <Gender as ::protobuf::Message>::default_instance()
    }
}

impl Gender {
    pub fn new() -> Gender {
        ::std::default::Default::default()
    }

    // .Gender.GenderBasic gender = 1;


    pub fn get_gender(&self) -> Gender_GenderBasic {
        self.gender
    }
    pub fn clear_gender(&mut self) {
        self.gender = Gender_GenderBasic::UNDEFINED;
    }

    // Param is passed by value, moved
    pub fn set_gender(&mut self, v: Gender_GenderBasic) {
        self.gender = v;
    }

    // string gender_other = 2;


    pub fn get_gender_other(&self) -> &str {
        &self.gender_other
    }
    pub fn clear_gender_other(&mut self) {
        self.gender_other.clear();
    }

    // Param is passed by value, moved
    pub fn set_gender_other(&mut self, v: ::std::string::String) {
        self.gender_other = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gender_other(&mut self) -> &mut ::std::string::String {
        &mut self.gender_other
    }

    // Take field
    pub fn take_gender_other(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gender_other, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Gender {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.gender, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gender_other)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.gender != Gender_GenderBasic::UNDEFINED {
            my_size += ::protobuf::rt::enum_size(1, self.gender);
        }
        if !self.gender_other.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.gender_other);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.gender != Gender_GenderBasic::UNDEFINED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.gender))?;
        }
        if !self.gender_other.is_empty() {
            os.write_string(2, &self.gender_other)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Gender {
        Gender::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Gender_GenderBasic>>(
                "gender",
                |m: &Gender| { &m.gender },
                |m: &mut Gender| { &mut m.gender },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gender_other",
                |m: &Gender| { &m.gender_other },
                |m: &mut Gender| { &mut m.gender_other },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Gender>(
                "Gender",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Gender {
        static instance: ::protobuf::rt::LazyV2<Gender> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Gender::new)
    }
}

impl ::protobuf::Clear for Gender {
    fn clear(&mut self) {
        self.gender = Gender_GenderBasic::UNDEFINED;
        self.gender_other.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Gender {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gender {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Gender_GenderBasic {
    UNDEFINED = 0,
    MALE = 1,
    FEMALE = 2,
    TRANS_M2F = 3,
    TRANS_F2M = 4,
    NON_BINARY = 5,
    FLUID = 6,
    GENDER_QUEER = 7,
    OTHER = 8,
}

impl ::protobuf::ProtobufEnum for Gender_GenderBasic {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Gender_GenderBasic> {
        match value {
            0 => ::std::option::Option::Some(Gender_GenderBasic::UNDEFINED),
            1 => ::std::option::Option::Some(Gender_GenderBasic::MALE),
            2 => ::std::option::Option::Some(Gender_GenderBasic::FEMALE),
            3 => ::std::option::Option::Some(Gender_GenderBasic::TRANS_M2F),
            4 => ::std::option::Option::Some(Gender_GenderBasic::TRANS_F2M),
            5 => ::std::option::Option::Some(Gender_GenderBasic::NON_BINARY),
            6 => ::std::option::Option::Some(Gender_GenderBasic::FLUID),
            7 => ::std::option::Option::Some(Gender_GenderBasic::GENDER_QUEER),
            8 => ::std::option::Option::Some(Gender_GenderBasic::OTHER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Gender_GenderBasic] = &[
            Gender_GenderBasic::UNDEFINED,
            Gender_GenderBasic::MALE,
            Gender_GenderBasic::FEMALE,
            Gender_GenderBasic::TRANS_M2F,
            Gender_GenderBasic::TRANS_F2M,
            Gender_GenderBasic::NON_BINARY,
            Gender_GenderBasic::FLUID,
            Gender_GenderBasic::GENDER_QUEER,
            Gender_GenderBasic::OTHER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Gender_GenderBasic>("Gender.GenderBasic", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Gender_GenderBasic {
}

impl ::std::default::Default for Gender_GenderBasic {
    fn default() -> Self {
        Gender_GenderBasic::UNDEFINED
    }
}

impl ::protobuf::reflect::ProtobufValue for Gender_GenderBasic {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Date {
    // message fields
    pub month: u32,
    pub day: u32,
    pub year: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Date {
    fn default() -> &'a Date {
        <Date as ::protobuf::Message>::default_instance()
    }
}

impl Date {
    pub fn new() -> Date {
        ::std::default::Default::default()
    }

    // uint32 month = 1;


    pub fn get_month(&self) -> u32 {
        self.month
    }
    pub fn clear_month(&mut self) {
        self.month = 0;
    }

    // Param is passed by value, moved
    pub fn set_month(&mut self, v: u32) {
        self.month = v;
    }

    // uint32 day = 2;


    pub fn get_day(&self) -> u32 {
        self.day
    }
    pub fn clear_day(&mut self) {
        self.day = 0;
    }

    // Param is passed by value, moved
    pub fn set_day(&mut self, v: u32) {
        self.day = v;
    }

    // int32 year = 3;


    pub fn get_year(&self) -> i32 {
        self.year
    }
    pub fn clear_year(&mut self) {
        self.year = 0;
    }

    // Param is passed by value, moved
    pub fn set_year(&mut self, v: i32) {
        self.year = v;
    }
}

impl ::protobuf::Message for Date {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.month = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.day = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.year = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.month != 0 {
            my_size += ::protobuf::rt::value_size(1, self.month, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.day != 0 {
            my_size += ::protobuf::rt::value_size(2, self.day, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.year != 0 {
            my_size += ::protobuf::rt::value_size(3, self.year, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.month != 0 {
            os.write_uint32(1, self.month)?;
        }
        if self.day != 0 {
            os.write_uint32(2, self.day)?;
        }
        if self.year != 0 {
            os.write_int32(3, self.year)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Date {
        Date::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "month",
                |m: &Date| { &m.month },
                |m: &mut Date| { &mut m.month },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "day",
                |m: &Date| { &m.day },
                |m: &mut Date| { &mut m.day },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "year",
                |m: &Date| { &m.year },
                |m: &mut Date| { &mut m.year },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Date>(
                "Date",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Date {
        static instance: ::protobuf::rt::LazyV2<Date> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Date::new)
    }
}

impl ::protobuf::Clear for Date {
    fn clear(&mut self) {
        self.month = 0;
        self.day = 0;
        self.year = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Date {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Date {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Time {
    // message fields
    pub hour: u32,
    pub minute: u32,
    pub second: u32,
    pub millisecond: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Time {
    fn default() -> &'a Time {
        <Time as ::protobuf::Message>::default_instance()
    }
}

impl Time {
    pub fn new() -> Time {
        ::std::default::Default::default()
    }

    // uint32 hour = 1;


    pub fn get_hour(&self) -> u32 {
        self.hour
    }
    pub fn clear_hour(&mut self) {
        self.hour = 0;
    }

    // Param is passed by value, moved
    pub fn set_hour(&mut self, v: u32) {
        self.hour = v;
    }

    // uint32 minute = 2;


    pub fn get_minute(&self) -> u32 {
        self.minute
    }
    pub fn clear_minute(&mut self) {
        self.minute = 0;
    }

    // Param is passed by value, moved
    pub fn set_minute(&mut self, v: u32) {
        self.minute = v;
    }

    // uint32 second = 3;


    pub fn get_second(&self) -> u32 {
        self.second
    }
    pub fn clear_second(&mut self) {
        self.second = 0;
    }

    // Param is passed by value, moved
    pub fn set_second(&mut self, v: u32) {
        self.second = v;
    }

    // uint32 millisecond = 4;


    pub fn get_millisecond(&self) -> u32 {
        self.millisecond
    }
    pub fn clear_millisecond(&mut self) {
        self.millisecond = 0;
    }

    // Param is passed by value, moved
    pub fn set_millisecond(&mut self, v: u32) {
        self.millisecond = v;
    }
}

impl ::protobuf::Message for Time {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hour = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.minute = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.second = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.millisecond = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.hour != 0 {
            my_size += ::protobuf::rt::value_size(1, self.hour, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.minute != 0 {
            my_size += ::protobuf::rt::value_size(2, self.minute, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.second != 0 {
            my_size += ::protobuf::rt::value_size(3, self.second, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.millisecond != 0 {
            my_size += ::protobuf::rt::value_size(4, self.millisecond, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.hour != 0 {
            os.write_uint32(1, self.hour)?;
        }
        if self.minute != 0 {
            os.write_uint32(2, self.minute)?;
        }
        if self.second != 0 {
            os.write_uint32(3, self.second)?;
        }
        if self.millisecond != 0 {
            os.write_uint32(4, self.millisecond)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Time {
        Time::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "hour",
                |m: &Time| { &m.hour },
                |m: &mut Time| { &mut m.hour },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "minute",
                |m: &Time| { &m.minute },
                |m: &mut Time| { &mut m.minute },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "second",
                |m: &Time| { &m.second },
                |m: &mut Time| { &mut m.second },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "millisecond",
                |m: &Time| { &m.millisecond },
                |m: &mut Time| { &mut m.millisecond },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Time>(
                "Time",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Time {
        static instance: ::protobuf::rt::LazyV2<Time> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Time::new)
    }
}

impl ::protobuf::Clear for Time {
    fn clear(&mut self) {
        self.hour = 0;
        self.minute = 0;
        self.second = 0;
        self.millisecond = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Time {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Time {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DateTime {
    // message fields
    pub month: u32,
    pub day: u32,
    pub year: i32,
    pub hour: u32,
    pub minute: u32,
    pub second: u32,
    pub millisecond: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DateTime {
    fn default() -> &'a DateTime {
        <DateTime as ::protobuf::Message>::default_instance()
    }
}

impl DateTime {
    pub fn new() -> DateTime {
        ::std::default::Default::default()
    }

    // uint32 month = 1;


    pub fn get_month(&self) -> u32 {
        self.month
    }
    pub fn clear_month(&mut self) {
        self.month = 0;
    }

    // Param is passed by value, moved
    pub fn set_month(&mut self, v: u32) {
        self.month = v;
    }

    // uint32 day = 2;


    pub fn get_day(&self) -> u32 {
        self.day
    }
    pub fn clear_day(&mut self) {
        self.day = 0;
    }

    // Param is passed by value, moved
    pub fn set_day(&mut self, v: u32) {
        self.day = v;
    }

    // int32 year = 3;


    pub fn get_year(&self) -> i32 {
        self.year
    }
    pub fn clear_year(&mut self) {
        self.year = 0;
    }

    // Param is passed by value, moved
    pub fn set_year(&mut self, v: i32) {
        self.year = v;
    }

    // uint32 hour = 4;


    pub fn get_hour(&self) -> u32 {
        self.hour
    }
    pub fn clear_hour(&mut self) {
        self.hour = 0;
    }

    // Param is passed by value, moved
    pub fn set_hour(&mut self, v: u32) {
        self.hour = v;
    }

    // uint32 minute = 5;


    pub fn get_minute(&self) -> u32 {
        self.minute
    }
    pub fn clear_minute(&mut self) {
        self.minute = 0;
    }

    // Param is passed by value, moved
    pub fn set_minute(&mut self, v: u32) {
        self.minute = v;
    }

    // uint32 second = 6;


    pub fn get_second(&self) -> u32 {
        self.second
    }
    pub fn clear_second(&mut self) {
        self.second = 0;
    }

    // Param is passed by value, moved
    pub fn set_second(&mut self, v: u32) {
        self.second = v;
    }

    // uint32 millisecond = 7;


    pub fn get_millisecond(&self) -> u32 {
        self.millisecond
    }
    pub fn clear_millisecond(&mut self) {
        self.millisecond = 0;
    }

    // Param is passed by value, moved
    pub fn set_millisecond(&mut self, v: u32) {
        self.millisecond = v;
    }
}

impl ::protobuf::Message for DateTime {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.month = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.day = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.year = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hour = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.minute = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.second = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.millisecond = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.month != 0 {
            my_size += ::protobuf::rt::value_size(1, self.month, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.day != 0 {
            my_size += ::protobuf::rt::value_size(2, self.day, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.year != 0 {
            my_size += ::protobuf::rt::value_size(3, self.year, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.hour != 0 {
            my_size += ::protobuf::rt::value_size(4, self.hour, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.minute != 0 {
            my_size += ::protobuf::rt::value_size(5, self.minute, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.second != 0 {
            my_size += ::protobuf::rt::value_size(6, self.second, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.millisecond != 0 {
            my_size += ::protobuf::rt::value_size(7, self.millisecond, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.month != 0 {
            os.write_uint32(1, self.month)?;
        }
        if self.day != 0 {
            os.write_uint32(2, self.day)?;
        }
        if self.year != 0 {
            os.write_int32(3, self.year)?;
        }
        if self.hour != 0 {
            os.write_uint32(4, self.hour)?;
        }
        if self.minute != 0 {
            os.write_uint32(5, self.minute)?;
        }
        if self.second != 0 {
            os.write_uint32(6, self.second)?;
        }
        if self.millisecond != 0 {
            os.write_uint32(7, self.millisecond)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DateTime {
        DateTime::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "month",
                |m: &DateTime| { &m.month },
                |m: &mut DateTime| { &mut m.month },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "day",
                |m: &DateTime| { &m.day },
                |m: &mut DateTime| { &mut m.day },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "year",
                |m: &DateTime| { &m.year },
                |m: &mut DateTime| { &mut m.year },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "hour",
                |m: &DateTime| { &m.hour },
                |m: &mut DateTime| { &mut m.hour },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "minute",
                |m: &DateTime| { &m.minute },
                |m: &mut DateTime| { &mut m.minute },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "second",
                |m: &DateTime| { &m.second },
                |m: &mut DateTime| { &mut m.second },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "millisecond",
                |m: &DateTime| { &m.millisecond },
                |m: &mut DateTime| { &mut m.millisecond },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DateTime>(
                "DateTime",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DateTime {
        static instance: ::protobuf::rt::LazyV2<DateTime> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DateTime::new)
    }
}

impl ::protobuf::Clear for DateTime {
    fn clear(&mut self) {
        self.month = 0;
        self.day = 0;
        self.year = 0;
        self.hour = 0;
        self.minute = 0;
        self.second = 0;
        self.millisecond = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DateTime {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DateTime {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Rating {
    NONE = 0,
    VERY_LOW = 1,
    LOW = 2,
    INDIFFERENT = 3,
    HIGH = 4,
    VERY_HIGH = 5,
}

impl ::protobuf::ProtobufEnum for Rating {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Rating> {
        match value {
            0 => ::std::option::Option::Some(Rating::NONE),
            1 => ::std::option::Option::Some(Rating::VERY_LOW),
            2 => ::std::option::Option::Some(Rating::LOW),
            3 => ::std::option::Option::Some(Rating::INDIFFERENT),
            4 => ::std::option::Option::Some(Rating::HIGH),
            5 => ::std::option::Option::Some(Rating::VERY_HIGH),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Rating] = &[
            Rating::NONE,
            Rating::VERY_LOW,
            Rating::LOW,
            Rating::INDIFFERENT,
            Rating::HIGH,
            Rating::VERY_HIGH,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Rating>("Rating", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Rating {
}

impl ::std::default::Default for Rating {
    fn default() -> Self {
        Rating::NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for Rating {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Ownership {
    NOT_SPECIFIED = 0,
    OWN = 1,
    NO_LONGER_OWN = 2,
    WANT = 3,
    DO_NOT_WANT = 4,
    INFORMATIONAL = 5,
}

impl ::protobuf::ProtobufEnum for Ownership {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Ownership> {
        match value {
            0 => ::std::option::Option::Some(Ownership::NOT_SPECIFIED),
            1 => ::std::option::Option::Some(Ownership::OWN),
            2 => ::std::option::Option::Some(Ownership::NO_LONGER_OWN),
            3 => ::std::option::Option::Some(Ownership::WANT),
            4 => ::std::option::Option::Some(Ownership::DO_NOT_WANT),
            5 => ::std::option::Option::Some(Ownership::INFORMATIONAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Ownership] = &[
            Ownership::NOT_SPECIFIED,
            Ownership::OWN,
            Ownership::NO_LONGER_OWN,
            Ownership::WANT,
            Ownership::DO_NOT_WANT,
            Ownership::INFORMATIONAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Ownership>("Ownership", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Ownership {
}

impl ::std::default::Default for Ownership {
    fn default() -> Self {
        Ownership::NOT_SPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Ownership {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ApplicableTo {
    ANY = 0,
    ACTOR = 1,
    NETWORK = 2,
    SITE = 3,
    STUDIO = 4,
    VIDEO = 5,
    ARTIST = 6,
    CHARACTER = 7,
    GAME_DEVELOPER = 8,
    GAME = 9,
    GAME_STUDIO = 10,
}

impl ::protobuf::ProtobufEnum for ApplicableTo {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ApplicableTo> {
        match value {
            0 => ::std::option::Option::Some(ApplicableTo::ANY),
            1 => ::std::option::Option::Some(ApplicableTo::ACTOR),
            2 => ::std::option::Option::Some(ApplicableTo::NETWORK),
            3 => ::std::option::Option::Some(ApplicableTo::SITE),
            4 => ::std::option::Option::Some(ApplicableTo::STUDIO),
            5 => ::std::option::Option::Some(ApplicableTo::VIDEO),
            6 => ::std::option::Option::Some(ApplicableTo::ARTIST),
            7 => ::std::option::Option::Some(ApplicableTo::CHARACTER),
            8 => ::std::option::Option::Some(ApplicableTo::GAME_DEVELOPER),
            9 => ::std::option::Option::Some(ApplicableTo::GAME),
            10 => ::std::option::Option::Some(ApplicableTo::GAME_STUDIO),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ApplicableTo] = &[
            ApplicableTo::ANY,
            ApplicableTo::ACTOR,
            ApplicableTo::NETWORK,
            ApplicableTo::SITE,
            ApplicableTo::STUDIO,
            ApplicableTo::VIDEO,
            ApplicableTo::ARTIST,
            ApplicableTo::CHARACTER,
            ApplicableTo::GAME_DEVELOPER,
            ApplicableTo::GAME,
            ApplicableTo::GAME_STUDIO,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ApplicableTo>("ApplicableTo", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ApplicableTo {
}

impl ::std::default::Default for ApplicableTo {
    fn default() -> Self {
        ApplicableTo::ANY
    }
}

impl ::protobuf::reflect::ProtobufValue for ApplicableTo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ccommon.proto\"\xbe\x01\n\x10CustomFieldValue\x12\x19\n\x08field_id\
    \x18\x01\x20\x01(\tR\x07fieldId\x12#\n\x0cstring_value\x18\x02\x20\x01(\
    \tH\0R\x0bstringValue\x12\x1d\n\tint_value\x18\x03\x20\x01(\x11H\0R\x08i\
    ntValue\x12!\n\x0bfloat_value\x18\x04\x20\x01(\x01H\0R\nfloatValue\x12\
    \x1f\n\nbool_value\x18\x05\x20\x01(\x08H\0R\tboolValueB\x07\n\x05value\"\
    \x9c\x01\n\x0cSundryThings\x12\x1a\n\x08favorite\x18\x01\x20\x01(\x08R\
    \x08favorite\x12\x1f\n\x06rating\x18\x02\x20\x01(\x0e2\x07.RatingR\x06ra\
    ting\x126\n\rcustom_fields\x18\x03\x20\x03(\x0b2\x11.CustomFieldValueR\
    \x0ccustomFields\x12\x17\n\x07tag_ids\x18\x04\x20\x03(\tR\x06tagIds\"\
    \xe3\x01\n\x06Gender\x12+\n\x06gender\x18\x01\x20\x01(\x0e2\x13.Gender.G\
    enderBasicR\x06gender\x12!\n\x0cgender_other\x18\x02\x20\x01(\tR\x0bgend\
    erOther\"\x88\x01\n\x0bGenderBasic\x12\r\n\tUNDEFINED\x10\0\x12\x08\n\
    \x04MALE\x10\x01\x12\n\n\x06FEMALE\x10\x02\x12\r\n\tTRANS_M2F\x10\x03\
    \x12\r\n\tTRANS_F2M\x10\x04\x12\x0e\n\nNON_BINARY\x10\x05\x12\t\n\x05FLU\
    ID\x10\x06\x12\x10\n\x0cGENDER_QUEER\x10\x07\x12\t\n\x05OTHER\x10\x08\"B\
    \n\x04Date\x12\x14\n\x05month\x18\x01\x20\x01(\rR\x05month\x12\x10\n\x03\
    day\x18\x02\x20\x01(\rR\x03day\x12\x12\n\x04year\x18\x03\x20\x01(\x05R\
    \x04year\"l\n\x04Time\x12\x12\n\x04hour\x18\x01\x20\x01(\rR\x04hour\x12\
    \x16\n\x06minute\x18\x02\x20\x01(\rR\x06minute\x12\x16\n\x06second\x18\
    \x03\x20\x01(\rR\x06second\x12\x20\n\x0bmillisecond\x18\x04\x20\x01(\rR\
    \x0bmillisecond\"\xac\x01\n\x08DateTime\x12\x14\n\x05month\x18\x01\x20\
    \x01(\rR\x05month\x12\x10\n\x03day\x18\x02\x20\x01(\rR\x03day\x12\x12\n\
    \x04year\x18\x03\x20\x01(\x05R\x04year\x12\x12\n\x04hour\x18\x04\x20\x01\
    (\rR\x04hour\x12\x16\n\x06minute\x18\x05\x20\x01(\rR\x06minute\x12\x16\n\
    \x06second\x18\x06\x20\x01(\rR\x06second\x12\x20\n\x0bmillisecond\x18\
    \x07\x20\x01(\rR\x0bmillisecond*S\n\x06Rating\x12\x08\n\x04NONE\x10\0\
    \x12\x0c\n\x08VERY_LOW\x10\x01\x12\x07\n\x03LOW\x10\x02\x12\x0f\n\x0bIND\
    IFFERENT\x10\x03\x12\x08\n\x04HIGH\x10\x04\x12\r\n\tVERY_HIGH\x10\x05*h\
    \n\tOwnership\x12\x11\n\rNOT_SPECIFIED\x10\0\x12\x07\n\x03OWN\x10\x01\
    \x12\x11\n\rNO_LONGER_OWN\x10\x02\x12\x08\n\x04WANT\x10\x03\x12\x0f\n\
    \x0bDO_NOT_WANT\x10\x04\x12\x11\n\rINFORMATIONAL\x10\x05*\x9a\x01\n\x0cA\
    pplicableTo\x12\x07\n\x03ANY\x10\0\x12\t\n\x05ACTOR\x10\x01\x12\x0b\n\
    \x07NETWORK\x10\x02\x12\x08\n\x04SITE\x10\x03\x12\n\n\x06STUDIO\x10\x04\
    \x12\t\n\x05VIDEO\x10\x05\x12\n\n\x06ARTIST\x10\x06\x12\r\n\tCHARACTER\
    \x10\x07\x12\x12\n\x0eGAME_DEVELOPER\x10\x08\x12\x08\n\x04GAME\x10\t\x12\
    \x0f\n\x0bGAME_STUDIO\x10\nJ\xa0\x18\n\x06\x12\x04\0\0[\x01\n\x17\n\x01\
    \x0c\x12\x03\0\0\x12\"\rCommon\x20types\n\n\n\n\x02\x05\0\x12\x04\x03\0\
    \n\x01\n\n\n\x03\x05\0\x01\x12\x03\x03\x05\x0b\n\x0b\n\x04\x05\0\x02\0\
    \x12\x03\x04\x04\r\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x04\x04\x08\n\x0c\
    \n\x05\x05\0\x02\0\x02\x12\x03\x04\x0b\x0c\n\x0b\n\x04\x05\0\x02\x01\x12\
    \x03\x05\x04\x11\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x05\x04\x0c\n\x0c\
    \n\x05\x05\0\x02\x01\x02\x12\x03\x05\x0f\x10\n\x0b\n\x04\x05\0\x02\x02\
    \x12\x03\x06\x04\x0c\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x06\x04\x07\n\
    \x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x06\n\x0b\n\x0b\n\x04\x05\0\x02\x03\
    \x12\x03\x07\x04\x14\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x07\x04\x0f\n\
    \x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x07\x12\x13\n\x0b\n\x04\x05\0\x02\
    \x04\x12\x03\x08\x04\r\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x08\x04\x08\
    \n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x08\x0b\x0c\n\x0b\n\x04\x05\0\x02\
    \x05\x12\x03\t\x04\x12\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\t\x04\r\n\
    \x0c\n\x05\x05\0\x02\x05\x02\x12\x03\t\x10\x11\n\n\n\x02\x05\x01\x12\x04\
    \x0c\0\x13\x01\n\n\n\x03\x05\x01\x01\x12\x03\x0c\x05\x0e\n\x0b\n\x04\x05\
    \x01\x02\0\x12\x03\r\x04\x16\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03\r\x04\
    \x11\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03\r\x14\x15\n\x0b\n\x04\x05\x01\
    \x02\x01\x12\x03\x0e\x04\x0c\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\x0e\
    \x04\x07\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03\x0e\n\x0b\n\x0b\n\x04\
    \x05\x01\x02\x02\x12\x03\x0f\x04\x16\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\
    \x03\x0f\x04\x11\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03\x0f\x14\x15\n\
    \x0b\n\x04\x05\x01\x02\x03\x12\x03\x10\x04\r\n\x0c\n\x05\x05\x01\x02\x03\
    \x01\x12\x03\x10\x04\x08\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03\x10\x0b\
    \x0c\n\x0b\n\x04\x05\x01\x02\x04\x12\x03\x11\x04\x14\n\x0c\n\x05\x05\x01\
    \x02\x04\x01\x12\x03\x11\x04\x0f\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\x03\
    \x11\x12\x13\n\x0b\n\x04\x05\x01\x02\x05\x12\x03\x12\x04\x16\n\x0c\n\x05\
    \x05\x01\x02\x05\x01\x12\x03\x12\x04\x11\n\x0c\n\x05\x05\x01\x02\x05\x02\
    \x12\x03\x12\x14\x15\n\n\n\x02\x04\0\x12\x04\x15\0\x1d\x01\n\n\n\x03\x04\
    \0\x01\x12\x03\x15\x08\x18\n\x0b\n\x04\x04\0\x02\0\x12\x03\x16\x04\x18\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x16\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x16\x0b\x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x16\x16\x17\n\
    \x0c\n\x04\x04\0\x08\0\x12\x04\x17\x04\x1c\x05\n\x0c\n\x05\x04\0\x08\0\
    \x01\x12\x03\x17\n\x0f\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x18\x08\x20\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x18\x08\x0e\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x18\x0f\x1b\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x18\
    \x1e\x1f\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x19\x08\x1d\n\x0c\n\x05\x04\0\
    \x02\x02\x05\x12\x03\x19\x08\x0e\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\
    \x19\x0f\x18\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x19\x1b\x1c\n\x0b\n\
    \x04\x04\0\x02\x03\x12\x03\x1a\x08\x1f\n\x0c\n\x05\x04\0\x02\x03\x05\x12\
    \x03\x1a\x08\x0e\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x1a\x0f\x1a\n\x0c\
    \n\x05\x04\0\x02\x03\x03\x12\x03\x1a\x1d\x1e\n\x0b\n\x04\x04\0\x02\x04\
    \x12\x03\x1b\x08\x1c\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x1b\x08\x0c\n\
    \x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x1b\r\x17\n\x0c\n\x05\x04\0\x02\x04\
    \x03\x12\x03\x1b\x1a\x1b\n\n\n\x02\x04\x01\x12\x04\x1f\0$\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03\x1f\x08\x14\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x20\
    \x04\x16\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x20\x04\x08\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x20\t\x11\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x20\x14\x15\n\x0b\n\x04\x04\x01\x02\x01\x12\x03!\x04\x16\n\x0c\n\
    \x05\x04\x01\x02\x01\x06\x12\x03!\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03!\x0b\x11\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03!\x14\x15\n\x0b\
    \n\x04\x04\x01\x02\x02\x12\x03\"\x040\n\x0c\n\x05\x04\x01\x02\x02\x04\
    \x12\x03\"\x04\x0c\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03\"\r\x1d\n\x0c\
    \n\x05\x04\x01\x02\x02\x01\x12\x03\"\x1e+\n\x0c\n\x05\x04\x01\x02\x02\
    \x03\x12\x03\"./\n\x0b\n\x04\x04\x01\x02\x03\x12\x03#\x04\x20\n\x0c\n\
    \x05\x04\x01\x02\x03\x04\x12\x03#\x04\x0c\n\x0c\n\x05\x04\x01\x02\x03\
    \x05\x12\x03#\r\x13\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03#\x14\x1b\n\
    \x0c\n\x05\x04\x01\x02\x03\x03\x12\x03#\x1e\x1f\n\n\n\x02\x04\x02\x12\
    \x04&\04\x01\n\n\n\x03\x04\x02\x01\x12\x03&\x08\x0e\n\x0c\n\x04\x04\x02\
    \x04\0\x12\x04'\x041\x05\n\x0c\n\x05\x04\x02\x04\0\x01\x12\x03'\t\x14\n\
    \r\n\x06\x04\x02\x04\0\x02\0\x12\x03(\x08\x16\n\x0e\n\x07\x04\x02\x04\0\
    \x02\0\x01\x12\x03(\x08\x11\n\x0e\n\x07\x04\x02\x04\0\x02\0\x02\x12\x03(\
    \x14\x15\n\r\n\x06\x04\x02\x04\0\x02\x01\x12\x03)\x08\x11\n\x0e\n\x07\
    \x04\x02\x04\0\x02\x01\x01\x12\x03)\x08\x0c\n\x0e\n\x07\x04\x02\x04\0\
    \x02\x01\x02\x12\x03)\x0f\x10\n\r\n\x06\x04\x02\x04\0\x02\x02\x12\x03*\
    \x08\x13\n\x0e\n\x07\x04\x02\x04\0\x02\x02\x01\x12\x03*\x08\x0e\n\x0e\n\
    \x07\x04\x02\x04\0\x02\x02\x02\x12\x03*\x11\x12\n\r\n\x06\x04\x02\x04\0\
    \x02\x03\x12\x03+\x08\x16\n\x0e\n\x07\x04\x02\x04\0\x02\x03\x01\x12\x03+\
    \x08\x11\n\x0e\n\x07\x04\x02\x04\0\x02\x03\x02\x12\x03+\x14\x15\n\r\n\
    \x06\x04\x02\x04\0\x02\x04\x12\x03,\x08\x16\n\x0e\n\x07\x04\x02\x04\0\
    \x02\x04\x01\x12\x03,\x08\x11\n\x0e\n\x07\x04\x02\x04\0\x02\x04\x02\x12\
    \x03,\x14\x15\n\r\n\x06\x04\x02\x04\0\x02\x05\x12\x03-\x08\x17\n\x0e\n\
    \x07\x04\x02\x04\0\x02\x05\x01\x12\x03-\x08\x12\n\x0e\n\x07\x04\x02\x04\
    \0\x02\x05\x02\x12\x03-\x15\x16\n\r\n\x06\x04\x02\x04\0\x02\x06\x12\x03.\
    \x08\x12\n\x0e\n\x07\x04\x02\x04\0\x02\x06\x01\x12\x03.\x08\r\n\x0e\n\
    \x07\x04\x02\x04\0\x02\x06\x02\x12\x03.\x10\x11\n\r\n\x06\x04\x02\x04\0\
    \x02\x07\x12\x03/\x08\x19\n\x0e\n\x07\x04\x02\x04\0\x02\x07\x01\x12\x03/\
    \x08\x14\n\x0e\n\x07\x04\x02\x04\0\x02\x07\x02\x12\x03/\x17\x18\n\r\n\
    \x06\x04\x02\x04\0\x02\x08\x12\x030\x08\x12\n\x0e\n\x07\x04\x02\x04\0\
    \x02\x08\x01\x12\x030\x08\r\n\x0e\n\x07\x04\x02\x04\0\x02\x08\x02\x12\
    \x030\x10\x11\n\x0b\n\x04\x04\x02\x02\0\x12\x032\x04\x1b\n\x0c\n\x05\x04\
    \x02\x02\0\x06\x12\x032\x04\x0f\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x032\
    \x10\x16\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x032\x19\x1a\n\x0b\n\x04\x04\
    \x02\x02\x01\x12\x033\x04\x1c\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x033\
    \x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x033\x0b\x17\n\x0c\n\x05\x04\
    \x02\x02\x01\x03\x12\x033\x1a\x1b\n\n\n\x02\x05\x02\x12\x046\0D\x01\n\n\
    \n\x03\x05\x02\x01\x12\x036\x05\x11\n\x0b\n\x04\x05\x02\x02\0\x12\x037\
    \x04\x0c\n\x0c\n\x05\x05\x02\x02\0\x01\x12\x037\x04\x07\n\x0c\n\x05\x05\
    \x02\x02\0\x02\x12\x037\n\x0b\n\x19\n\x04\x05\x02\x02\x01\x12\x039\x04\
    \x0e\x1a\x0cVideo\x20stuff\n\n\x0c\n\x05\x05\x02\x02\x01\x01\x12\x039\
    \x04\t\n\x0c\n\x05\x05\x02\x02\x01\x02\x12\x039\x0c\r\n\x0b\n\x04\x05\
    \x02\x02\x02\x12\x03:\x04\x10\n\x0c\n\x05\x05\x02\x02\x02\x01\x12\x03:\
    \x04\x0b\n\x0c\n\x05\x05\x02\x02\x02\x02\x12\x03:\x0e\x0f\n\x0b\n\x04\
    \x05\x02\x02\x03\x12\x03;\x04\r\n\x0c\n\x05\x05\x02\x02\x03\x01\x12\x03;\
    \x04\x08\n\x0c\n\x05\x05\x02\x02\x03\x02\x12\x03;\x0b\x0c\n\x0b\n\x04\
    \x05\x02\x02\x04\x12\x03<\x04\x0f\n\x0c\n\x05\x05\x02\x02\x04\x01\x12\
    \x03<\x04\n\n\x0c\n\x05\x05\x02\x02\x04\x02\x12\x03<\r\x0e\n\x0b\n\x04\
    \x05\x02\x02\x05\x12\x03=\x04\x0e\n\x0c\n\x05\x05\x02\x02\x05\x01\x12\
    \x03=\x04\t\n\x0c\n\x05\x05\x02\x02\x05\x02\x12\x03=\x0c\r\n\x1b\n\x04\
    \x05\x02\x02\x06\x12\x03?\x04\x0f\x1a\x0e\x20Hentai\x20stuff\n\n\x0c\n\
    \x05\x05\x02\x02\x06\x01\x12\x03?\x04\n\n\x0c\n\x05\x05\x02\x02\x06\x02\
    \x12\x03?\r\x0e\n\x0b\n\x04\x05\x02\x02\x07\x12\x03@\x04\x12\n\x0c\n\x05\
    \x05\x02\x02\x07\x01\x12\x03@\x04\r\n\x0c\n\x05\x05\x02\x02\x07\x02\x12\
    \x03@\x10\x11\n\x0b\n\x04\x05\x02\x02\x08\x12\x03A\x04\x17\n\x0c\n\x05\
    \x05\x02\x02\x08\x01\x12\x03A\x04\x12\n\x0c\n\x05\x05\x02\x02\x08\x02\
    \x12\x03A\x15\x16\n\x0b\n\x04\x05\x02\x02\t\x12\x03B\x04\r\n\x0c\n\x05\
    \x05\x02\x02\t\x01\x12\x03B\x04\x08\n\x0c\n\x05\x05\x02\x02\t\x02\x12\
    \x03B\x0b\x0c\n\x0b\n\x04\x05\x02\x02\n\x12\x03C\x04\x15\n\x0c\n\x05\x05\
    \x02\x02\n\x01\x12\x03C\x04\x0f\n\x0c\n\x05\x05\x02\x02\n\x02\x12\x03C\
    \x12\x14\n\n\n\x02\x04\x03\x12\x04F\0J\x01\n\n\n\x03\x04\x03\x01\x12\x03\
    F\x08\x0c\n\x0b\n\x04\x04\x03\x02\0\x12\x03G\x04\x15\n\x0c\n\x05\x04\x03\
    \x02\0\x05\x12\x03G\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03G\x0b\x10\
    \n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03G\x13\x14\n\x0b\n\x04\x04\x03\x02\
    \x01\x12\x03H\x04\x13\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03H\x04\n\n\
    \x0c\n\x05\x04\x03\x02\x01\x01\x12\x03H\x0b\x0e\n\x0c\n\x05\x04\x03\x02\
    \x01\x03\x12\x03H\x11\x12\n\x0b\n\x04\x04\x03\x02\x02\x12\x03I\x04\x13\n\
    \x0c\n\x05\x04\x03\x02\x02\x05\x12\x03I\x04\t\n\x0c\n\x05\x04\x03\x02\
    \x02\x01\x12\x03I\n\x0e\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03I\x11\x12\
    \n\n\n\x02\x04\x04\x12\x04L\0Q\x01\n\n\n\x03\x04\x04\x01\x12\x03L\x08\
    \x0c\n\x0b\n\x04\x04\x04\x02\0\x12\x03M\x04\x14\n\x0c\n\x05\x04\x04\x02\
    \0\x05\x12\x03M\x04\n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03M\x0b\x0f\n\
    \x0c\n\x05\x04\x04\x02\0\x03\x12\x03M\x12\x13\n\x0b\n\x04\x04\x04\x02\
    \x01\x12\x03N\x04\x16\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03N\x04\n\n\
    \x0c\n\x05\x04\x04\x02\x01\x01\x12\x03N\x0b\x11\n\x0c\n\x05\x04\x04\x02\
    \x01\x03\x12\x03N\x14\x15\n\x0b\n\x04\x04\x04\x02\x02\x12\x03O\x04\x16\n\
    \x0c\n\x05\x04\x04\x02\x02\x05\x12\x03O\x04\n\n\x0c\n\x05\x04\x04\x02\
    \x02\x01\x12\x03O\x0b\x11\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03O\x14\
    \x15\n\x0b\n\x04\x04\x04\x02\x03\x12\x03P\x04\x1b\n\x0c\n\x05\x04\x04\
    \x02\x03\x05\x12\x03P\x04\n\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03P\x0b\
    \x16\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03P\x19\x1a\n\n\n\x02\x04\x05\
    \x12\x04S\0[\x01\n\n\n\x03\x04\x05\x01\x12\x03S\x08\x10\n\x0b\n\x04\x04\
    \x05\x02\0\x12\x03T\x04\x15\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03T\x04\n\
    \n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03T\x0b\x10\n\x0c\n\x05\x04\x05\x02\
    \0\x03\x12\x03T\x13\x14\n\x0b\n\x04\x04\x05\x02\x01\x12\x03U\x04\x13\n\
    \x0c\n\x05\x04\x05\x02\x01\x05\x12\x03U\x04\n\n\x0c\n\x05\x04\x05\x02\
    \x01\x01\x12\x03U\x0b\x0e\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03U\x11\
    \x12\n\x0b\n\x04\x04\x05\x02\x02\x12\x03V\x04\x13\n\x0c\n\x05\x04\x05\
    \x02\x02\x05\x12\x03V\x04\t\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03V\n\
    \x0e\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03V\x11\x12\n\x0b\n\x04\x04\
    \x05\x02\x03\x12\x03W\x04\x14\n\x0c\n\x05\x04\x05\x02\x03\x05\x12\x03W\
    \x04\n\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x03W\x0b\x0f\n\x0c\n\x05\x04\
    \x05\x02\x03\x03\x12\x03W\x12\x13\n\x0b\n\x04\x04\x05\x02\x04\x12\x03X\
    \x04\x16\n\x0c\n\x05\x04\x05\x02\x04\x05\x12\x03X\x04\n\n\x0c\n\x05\x04\
    \x05\x02\x04\x01\x12\x03X\x0b\x11\n\x0c\n\x05\x04\x05\x02\x04\x03\x12\
    \x03X\x14\x15\n\x0b\n\x04\x04\x05\x02\x05\x12\x03Y\x04\x16\n\x0c\n\x05\
    \x04\x05\x02\x05\x05\x12\x03Y\x04\n\n\x0c\n\x05\x04\x05\x02\x05\x01\x12\
    \x03Y\x0b\x11\n\x0c\n\x05\x04\x05\x02\x05\x03\x12\x03Y\x14\x15\n\x0b\n\
    \x04\x04\x05\x02\x06\x12\x03Z\x04\x1b\n\x0c\n\x05\x04\x05\x02\x06\x05\
    \x12\x03Z\x04\n\n\x0c\n\x05\x04\x05\x02\x06\x01\x12\x03Z\x0b\x16\n\x0c\n\
    \x05\x04\x05\x02\x06\x03\x12\x03Z\x19\x1ab\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
