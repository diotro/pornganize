// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CustomFieldValue {
    // message fields
    pub field_id: ::std::string::String,
    // message oneof groups
    pub value: ::std::option::Option<CustomFieldValue_oneof_value>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CustomFieldValue {
    fn default() -> &'a CustomFieldValue {
        <CustomFieldValue as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum CustomFieldValue_oneof_value {
    string_value(::std::string::String),
    int_value(i32),
    float_value(f64),
    bool_value(bool),
}

impl CustomFieldValue {
    pub fn new() -> CustomFieldValue {
        ::std::default::Default::default()
    }

    // string field_id = 1;


    pub fn get_field_id(&self) -> &str {
        &self.field_id
    }

    // string string_value = 2;


    pub fn get_string_value(&self) -> &str {
        match self.value {
            ::std::option::Option::Some(CustomFieldValue_oneof_value::string_value(ref v)) => v,
            _ => "",
        }
    }

    // sint32 int_value = 3;


    pub fn get_int_value(&self) -> i32 {
        match self.value {
            ::std::option::Option::Some(CustomFieldValue_oneof_value::int_value(v)) => v,
            _ => 0,
        }
    }

    // double float_value = 4;


    pub fn get_float_value(&self) -> f64 {
        match self.value {
            ::std::option::Option::Some(CustomFieldValue_oneof_value::float_value(v)) => v,
            _ => 0.,
        }
    }

    // bool bool_value = 5;


    pub fn get_bool_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(CustomFieldValue_oneof_value::bool_value(v)) => v,
            _ => false,
        }
    }
}

impl ::protobuf::Message for CustomFieldValue {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(CustomFieldValue_oneof_value::string_value(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(CustomFieldValue_oneof_value::int_value(is.read_sint32()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(CustomFieldValue_oneof_value::float_value(is.read_double()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(CustomFieldValue_oneof_value::bool_value(is.read_bool()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_id);
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &CustomFieldValue_oneof_value::string_value(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &CustomFieldValue_oneof_value::int_value(v) => {
                    my_size += ::protobuf::rt::value_varint_zigzag_size(3, v);
                },
                &CustomFieldValue_oneof_value::float_value(v) => {
                    my_size += 9;
                },
                &CustomFieldValue_oneof_value::bool_value(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_id.is_empty() {
            os.write_string(1, &self.field_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &CustomFieldValue_oneof_value::string_value(ref v) => {
                    os.write_string(2, v)?;
                },
                &CustomFieldValue_oneof_value::int_value(v) => {
                    os.write_sint32(3, v)?;
                },
                &CustomFieldValue_oneof_value::float_value(v) => {
                    os.write_double(4, v)?;
                },
                &CustomFieldValue_oneof_value::bool_value(v) => {
                    os.write_bool(5, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CustomFieldValue {
        CustomFieldValue::new()
    }

    fn default_instance() -> &'static CustomFieldValue {
        static instance: ::protobuf::rt::LazyV2<CustomFieldValue> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CustomFieldValue::new)
    }
}

impl ::protobuf::Clear for CustomFieldValue {
    fn clear(&mut self) {
        self.field_id.clear();
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomFieldValue {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SundryThings {
    // message fields
    pub favorite: bool,
    pub rating: Rating,
    pub custom_fields: ::protobuf::RepeatedField<CustomFieldValue>,
    pub tag_ids: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SundryThings {
    fn default() -> &'a SundryThings {
        <SundryThings as ::protobuf::Message>::default_instance()
    }
}

impl SundryThings {
    pub fn new() -> SundryThings {
        ::std::default::Default::default()
    }

    // bool favorite = 1;


    pub fn get_favorite(&self) -> bool {
        self.favorite
    }

    // .Rating rating = 2;


    pub fn get_rating(&self) -> Rating {
        self.rating
    }

    // repeated .CustomFieldValue custom_fields = 3;


    pub fn get_custom_fields(&self) -> &[CustomFieldValue] {
        &self.custom_fields
    }

    // repeated string tag_ids = 4;


    pub fn get_tag_ids(&self) -> &[::std::string::String] {
        &self.tag_ids
    }
}

impl ::protobuf::Message for SundryThings {
    fn is_initialized(&self) -> bool {
        for v in &self.custom_fields {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.favorite = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.rating, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.custom_fields)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tag_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.favorite != false {
            my_size += 2;
        }
        if self.rating != Rating::NONE {
            my_size += ::protobuf::rt::enum_size(2, self.rating);
        }
        for value in &self.custom_fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.tag_ids {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.favorite != false {
            os.write_bool(1, self.favorite)?;
        }
        if self.rating != Rating::NONE {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.rating))?;
        }
        for v in &self.custom_fields {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.tag_ids {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SundryThings {
        SundryThings::new()
    }

    fn default_instance() -> &'static SundryThings {
        static instance: ::protobuf::rt::LazyV2<SundryThings> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SundryThings::new)
    }
}

impl ::protobuf::Clear for SundryThings {
    fn clear(&mut self) {
        self.favorite = false;
        self.rating = Rating::NONE;
        self.custom_fields.clear();
        self.tag_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for SundryThings {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Gender {
    // message fields
    pub gender: Gender_GenderBasic,
    pub gender_other: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Gender {
    fn default() -> &'a Gender {
        <Gender as ::protobuf::Message>::default_instance()
    }
}

impl Gender {
    pub fn new() -> Gender {
        ::std::default::Default::default()
    }

    // .Gender.GenderBasic gender = 1;


    pub fn get_gender(&self) -> Gender_GenderBasic {
        self.gender
    }

    // string gender_other = 2;


    pub fn get_gender_other(&self) -> &str {
        &self.gender_other
    }
}

impl ::protobuf::Message for Gender {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.gender, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gender_other)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.gender != Gender_GenderBasic::UNDEFINED {
            my_size += ::protobuf::rt::enum_size(1, self.gender);
        }
        if !self.gender_other.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.gender_other);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.gender != Gender_GenderBasic::UNDEFINED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.gender))?;
        }
        if !self.gender_other.is_empty() {
            os.write_string(2, &self.gender_other)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Gender {
        Gender::new()
    }

    fn default_instance() -> &'static Gender {
        static instance: ::protobuf::rt::LazyV2<Gender> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Gender::new)
    }
}

impl ::protobuf::Clear for Gender {
    fn clear(&mut self) {
        self.gender = Gender_GenderBasic::UNDEFINED;
        self.gender_other.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Gender {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum Gender_GenderBasic {
    UNDEFINED = 0,
    MALE = 1,
    FEMALE = 2,
    TRANS_M2F = 3,
    TRANS_F2M = 4,
    NON_BINARY = 5,
    FLUID = 6,
    GENDER_QUEER = 7,
    OTHER = 8,
}

impl ::protobuf::ProtobufEnum for Gender_GenderBasic {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Gender_GenderBasic> {
        match value {
            0 => ::std::option::Option::Some(Gender_GenderBasic::UNDEFINED),
            1 => ::std::option::Option::Some(Gender_GenderBasic::MALE),
            2 => ::std::option::Option::Some(Gender_GenderBasic::FEMALE),
            3 => ::std::option::Option::Some(Gender_GenderBasic::TRANS_M2F),
            4 => ::std::option::Option::Some(Gender_GenderBasic::TRANS_F2M),
            5 => ::std::option::Option::Some(Gender_GenderBasic::NON_BINARY),
            6 => ::std::option::Option::Some(Gender_GenderBasic::FLUID),
            7 => ::std::option::Option::Some(Gender_GenderBasic::GENDER_QUEER),
            8 => ::std::option::Option::Some(Gender_GenderBasic::OTHER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Gender_GenderBasic] = &[
            Gender_GenderBasic::UNDEFINED,
            Gender_GenderBasic::MALE,
            Gender_GenderBasic::FEMALE,
            Gender_GenderBasic::TRANS_M2F,
            Gender_GenderBasic::TRANS_F2M,
            Gender_GenderBasic::NON_BINARY,
            Gender_GenderBasic::FLUID,
            Gender_GenderBasic::GENDER_QUEER,
            Gender_GenderBasic::OTHER,
        ];
        values
    }
}

impl ::std::marker::Copy for Gender_GenderBasic {
}

impl ::std::default::Default for Gender_GenderBasic {
    fn default() -> Self {
        Gender_GenderBasic::UNDEFINED
    }
}

impl ::protobuf::reflect::ProtobufValue for Gender_GenderBasic {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Date {
    // message fields
    pub month: u32,
    pub day: u32,
    pub year: i32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Date {
    fn default() -> &'a Date {
        <Date as ::protobuf::Message>::default_instance()
    }
}

impl Date {
    pub fn new() -> Date {
        ::std::default::Default::default()
    }

    // uint32 month = 1;


    pub fn get_month(&self) -> u32 {
        self.month
    }

    // uint32 day = 2;


    pub fn get_day(&self) -> u32 {
        self.day
    }

    // int32 year = 3;


    pub fn get_year(&self) -> i32 {
        self.year
    }
}

impl ::protobuf::Message for Date {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.month = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.day = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.year = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.month != 0 {
            my_size += ::protobuf::rt::value_size(1, self.month, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.day != 0 {
            my_size += ::protobuf::rt::value_size(2, self.day, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.year != 0 {
            my_size += ::protobuf::rt::value_size(3, self.year, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.month != 0 {
            os.write_uint32(1, self.month)?;
        }
        if self.day != 0 {
            os.write_uint32(2, self.day)?;
        }
        if self.year != 0 {
            os.write_int32(3, self.year)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Date {
        Date::new()
    }

    fn default_instance() -> &'static Date {
        static instance: ::protobuf::rt::LazyV2<Date> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Date::new)
    }
}

impl ::protobuf::Clear for Date {
    fn clear(&mut self) {
        self.month = 0;
        self.day = 0;
        self.year = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Date {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Time {
    // message fields
    pub hour: u32,
    pub minute: u32,
    pub second: u32,
    pub millisecond: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Time {
    fn default() -> &'a Time {
        <Time as ::protobuf::Message>::default_instance()
    }
}

impl Time {
    pub fn new() -> Time {
        ::std::default::Default::default()
    }

    // uint32 hour = 1;


    pub fn get_hour(&self) -> u32 {
        self.hour
    }

    // uint32 minute = 2;


    pub fn get_minute(&self) -> u32 {
        self.minute
    }

    // uint32 second = 3;


    pub fn get_second(&self) -> u32 {
        self.second
    }

    // uint32 millisecond = 4;


    pub fn get_millisecond(&self) -> u32 {
        self.millisecond
    }
}

impl ::protobuf::Message for Time {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hour = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.minute = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.second = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.millisecond = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.hour != 0 {
            my_size += ::protobuf::rt::value_size(1, self.hour, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.minute != 0 {
            my_size += ::protobuf::rt::value_size(2, self.minute, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.second != 0 {
            my_size += ::protobuf::rt::value_size(3, self.second, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.millisecond != 0 {
            my_size += ::protobuf::rt::value_size(4, self.millisecond, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.hour != 0 {
            os.write_uint32(1, self.hour)?;
        }
        if self.minute != 0 {
            os.write_uint32(2, self.minute)?;
        }
        if self.second != 0 {
            os.write_uint32(3, self.second)?;
        }
        if self.millisecond != 0 {
            os.write_uint32(4, self.millisecond)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Time {
        Time::new()
    }

    fn default_instance() -> &'static Time {
        static instance: ::protobuf::rt::LazyV2<Time> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Time::new)
    }
}

impl ::protobuf::Clear for Time {
    fn clear(&mut self) {
        self.hour = 0;
        self.minute = 0;
        self.second = 0;
        self.millisecond = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Time {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct DateTime {
    // message fields
    pub month: u32,
    pub day: u32,
    pub year: i32,
    pub hour: u32,
    pub minute: u32,
    pub second: u32,
    pub millisecond: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DateTime {
    fn default() -> &'a DateTime {
        <DateTime as ::protobuf::Message>::default_instance()
    }
}

impl DateTime {
    pub fn new() -> DateTime {
        ::std::default::Default::default()
    }

    // uint32 month = 1;


    pub fn get_month(&self) -> u32 {
        self.month
    }

    // uint32 day = 2;


    pub fn get_day(&self) -> u32 {
        self.day
    }

    // int32 year = 3;


    pub fn get_year(&self) -> i32 {
        self.year
    }

    // uint32 hour = 4;


    pub fn get_hour(&self) -> u32 {
        self.hour
    }

    // uint32 minute = 5;


    pub fn get_minute(&self) -> u32 {
        self.minute
    }

    // uint32 second = 6;


    pub fn get_second(&self) -> u32 {
        self.second
    }

    // uint32 millisecond = 7;


    pub fn get_millisecond(&self) -> u32 {
        self.millisecond
    }
}

impl ::protobuf::Message for DateTime {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.month = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.day = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.year = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hour = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.minute = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.second = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.millisecond = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.month != 0 {
            my_size += ::protobuf::rt::value_size(1, self.month, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.day != 0 {
            my_size += ::protobuf::rt::value_size(2, self.day, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.year != 0 {
            my_size += ::protobuf::rt::value_size(3, self.year, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.hour != 0 {
            my_size += ::protobuf::rt::value_size(4, self.hour, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.minute != 0 {
            my_size += ::protobuf::rt::value_size(5, self.minute, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.second != 0 {
            my_size += ::protobuf::rt::value_size(6, self.second, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.millisecond != 0 {
            my_size += ::protobuf::rt::value_size(7, self.millisecond, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.month != 0 {
            os.write_uint32(1, self.month)?;
        }
        if self.day != 0 {
            os.write_uint32(2, self.day)?;
        }
        if self.year != 0 {
            os.write_int32(3, self.year)?;
        }
        if self.hour != 0 {
            os.write_uint32(4, self.hour)?;
        }
        if self.minute != 0 {
            os.write_uint32(5, self.minute)?;
        }
        if self.second != 0 {
            os.write_uint32(6, self.second)?;
        }
        if self.millisecond != 0 {
            os.write_uint32(7, self.millisecond)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DateTime {
        DateTime::new()
    }

    fn default_instance() -> &'static DateTime {
        static instance: ::protobuf::rt::LazyV2<DateTime> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DateTime::new)
    }
}

impl ::protobuf::Clear for DateTime {
    fn clear(&mut self) {
        self.month = 0;
        self.day = 0;
        self.year = 0;
        self.hour = 0;
        self.minute = 0;
        self.second = 0;
        self.millisecond = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for DateTime {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum Rating {
    NONE = 0,
    VERY_LOW = 1,
    LOW = 2,
    INDIFFERENT = 3,
    HIGH = 4,
    VERY_HIGH = 5,
}

impl ::protobuf::ProtobufEnum for Rating {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Rating> {
        match value {
            0 => ::std::option::Option::Some(Rating::NONE),
            1 => ::std::option::Option::Some(Rating::VERY_LOW),
            2 => ::std::option::Option::Some(Rating::LOW),
            3 => ::std::option::Option::Some(Rating::INDIFFERENT),
            4 => ::std::option::Option::Some(Rating::HIGH),
            5 => ::std::option::Option::Some(Rating::VERY_HIGH),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Rating] = &[
            Rating::NONE,
            Rating::VERY_LOW,
            Rating::LOW,
            Rating::INDIFFERENT,
            Rating::HIGH,
            Rating::VERY_HIGH,
        ];
        values
    }
}

impl ::std::marker::Copy for Rating {
}

impl ::std::default::Default for Rating {
    fn default() -> Self {
        Rating::NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for Rating {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum Ownership {
    NOT_SPECIFIED = 0,
    OWN = 1,
    NO_LONGER_OWN = 2,
    WANT = 3,
    DO_NOT_WANT = 4,
    INFORMATIONAL = 5,
}

impl ::protobuf::ProtobufEnum for Ownership {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Ownership> {
        match value {
            0 => ::std::option::Option::Some(Ownership::NOT_SPECIFIED),
            1 => ::std::option::Option::Some(Ownership::OWN),
            2 => ::std::option::Option::Some(Ownership::NO_LONGER_OWN),
            3 => ::std::option::Option::Some(Ownership::WANT),
            4 => ::std::option::Option::Some(Ownership::DO_NOT_WANT),
            5 => ::std::option::Option::Some(Ownership::INFORMATIONAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Ownership] = &[
            Ownership::NOT_SPECIFIED,
            Ownership::OWN,
            Ownership::NO_LONGER_OWN,
            Ownership::WANT,
            Ownership::DO_NOT_WANT,
            Ownership::INFORMATIONAL,
        ];
        values
    }
}

impl ::std::marker::Copy for Ownership {
}

impl ::std::default::Default for Ownership {
    fn default() -> Self {
        Ownership::NOT_SPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Ownership {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum ApplicableTo {
    ANY = 0,
    ACTOR = 1,
    NETWORK = 2,
    SITE = 3,
    STUDIO = 4,
    VIDEO = 5,
    ARTIST = 6,
    CHARACTER = 7,
    GAME_DEVELOPER = 8,
    GAME = 9,
    GAME_STUDIO = 10,
}

impl ::protobuf::ProtobufEnum for ApplicableTo {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ApplicableTo> {
        match value {
            0 => ::std::option::Option::Some(ApplicableTo::ANY),
            1 => ::std::option::Option::Some(ApplicableTo::ACTOR),
            2 => ::std::option::Option::Some(ApplicableTo::NETWORK),
            3 => ::std::option::Option::Some(ApplicableTo::SITE),
            4 => ::std::option::Option::Some(ApplicableTo::STUDIO),
            5 => ::std::option::Option::Some(ApplicableTo::VIDEO),
            6 => ::std::option::Option::Some(ApplicableTo::ARTIST),
            7 => ::std::option::Option::Some(ApplicableTo::CHARACTER),
            8 => ::std::option::Option::Some(ApplicableTo::GAME_DEVELOPER),
            9 => ::std::option::Option::Some(ApplicableTo::GAME),
            10 => ::std::option::Option::Some(ApplicableTo::GAME_STUDIO),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ApplicableTo] = &[
            ApplicableTo::ANY,
            ApplicableTo::ACTOR,
            ApplicableTo::NETWORK,
            ApplicableTo::SITE,
            ApplicableTo::STUDIO,
            ApplicableTo::VIDEO,
            ApplicableTo::ARTIST,
            ApplicableTo::CHARACTER,
            ApplicableTo::GAME_DEVELOPER,
            ApplicableTo::GAME,
            ApplicableTo::GAME_STUDIO,
        ];
        values
    }
}

impl ::std::marker::Copy for ApplicableTo {
}

impl ::std::default::Default for ApplicableTo {
    fn default() -> Self {
        ApplicableTo::ANY
    }
}

impl ::protobuf::reflect::ProtobufValue for ApplicableTo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}
