// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `game.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct GameDeveloper {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub established: ::protobuf::SingularPtrField<super::common::Date>,
    pub description: ::std::string::String,
    pub sundry: ::protobuf::SingularPtrField<super::common::SundryThings>,
    pub added_on: ::protobuf::SingularPtrField<super::common::DateTime>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GameDeveloper {
    fn default() -> &'a GameDeveloper {
        <GameDeveloper as ::protobuf::Message>::default_instance()
    }
}

impl GameDeveloper {
    pub fn new() -> GameDeveloper {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }

    // .Date established = 3;


    pub fn get_established(&self) -> &super::common::Date {
        self.established.as_ref().unwrap_or_else(|| <super::common::Date as ::protobuf::Message>::default_instance())
    }

    // string description = 4;


    pub fn get_description(&self) -> &str {
        &self.description
    }

    // .SundryThings sundry = 5;


    pub fn get_sundry(&self) -> &super::common::SundryThings {
        self.sundry.as_ref().unwrap_or_else(|| <super::common::SundryThings as ::protobuf::Message>::default_instance())
    }

    // .DateTime added_on = 350;


    pub fn get_added_on(&self) -> &super::common::DateTime {
        self.added_on.as_ref().unwrap_or_else(|| <super::common::DateTime as ::protobuf::Message>::default_instance())
    }
}

impl ::protobuf::Message for GameDeveloper {
    fn is_initialized(&self) -> bool {
        for v in &self.established {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sundry {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.added_on {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.established)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sundry)?;
                },
                350 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.added_on)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if let Some(ref v) = self.established.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.description);
        }
        if let Some(ref v) = self.sundry.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if let Some(ref v) = self.established.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.description.is_empty() {
            os.write_string(4, &self.description)?;
        }
        if let Some(ref v) = self.sundry.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            os.write_tag(350, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GameDeveloper {
        GameDeveloper::new()
    }

    fn default_instance() -> &'static GameDeveloper {
        static instance: ::protobuf::rt::LazyV2<GameDeveloper> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GameDeveloper::new)
    }
}

impl ::protobuf::Clear for GameDeveloper {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.established.clear();
        self.description.clear();
        self.sundry.clear();
        self.added_on.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for GameDeveloper {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct GameStudio {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub established: ::protobuf::SingularPtrField<super::common::Date>,
    pub description: ::std::string::String,
    pub sundry: ::protobuf::SingularPtrField<super::common::SundryThings>,
    pub added_on: ::protobuf::SingularPtrField<super::common::DateTime>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GameStudio {
    fn default() -> &'a GameStudio {
        <GameStudio as ::protobuf::Message>::default_instance()
    }
}

impl GameStudio {
    pub fn new() -> GameStudio {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }

    // .Date established = 3;


    pub fn get_established(&self) -> &super::common::Date {
        self.established.as_ref().unwrap_or_else(|| <super::common::Date as ::protobuf::Message>::default_instance())
    }

    // string description = 4;


    pub fn get_description(&self) -> &str {
        &self.description
    }

    // .SundryThings sundry = 5;


    pub fn get_sundry(&self) -> &super::common::SundryThings {
        self.sundry.as_ref().unwrap_or_else(|| <super::common::SundryThings as ::protobuf::Message>::default_instance())
    }

    // .DateTime added_on = 350;


    pub fn get_added_on(&self) -> &super::common::DateTime {
        self.added_on.as_ref().unwrap_or_else(|| <super::common::DateTime as ::protobuf::Message>::default_instance())
    }
}

impl ::protobuf::Message for GameStudio {
    fn is_initialized(&self) -> bool {
        for v in &self.established {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sundry {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.added_on {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.established)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sundry)?;
                },
                350 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.added_on)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if let Some(ref v) = self.established.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.description);
        }
        if let Some(ref v) = self.sundry.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if let Some(ref v) = self.established.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.description.is_empty() {
            os.write_string(4, &self.description)?;
        }
        if let Some(ref v) = self.sundry.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            os.write_tag(350, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GameStudio {
        GameStudio::new()
    }

    fn default_instance() -> &'static GameStudio {
        static instance: ::protobuf::rt::LazyV2<GameStudio> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GameStudio::new)
    }
}

impl ::protobuf::Clear for GameStudio {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.established.clear();
        self.description.clear();
        self.sundry.clear();
        self.added_on.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for GameStudio {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct GameTranslator {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub established: ::protobuf::SingularPtrField<super::common::Date>,
    pub description: ::std::string::String,
    pub sundry: ::protobuf::SingularPtrField<super::common::SundryThings>,
    pub added_on: ::protobuf::SingularPtrField<super::common::DateTime>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GameTranslator {
    fn default() -> &'a GameTranslator {
        <GameTranslator as ::protobuf::Message>::default_instance()
    }
}

impl GameTranslator {
    pub fn new() -> GameTranslator {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }

    // .Date established = 3;


    pub fn get_established(&self) -> &super::common::Date {
        self.established.as_ref().unwrap_or_else(|| <super::common::Date as ::protobuf::Message>::default_instance())
    }

    // string description = 4;


    pub fn get_description(&self) -> &str {
        &self.description
    }

    // .SundryThings sundry = 5;


    pub fn get_sundry(&self) -> &super::common::SundryThings {
        self.sundry.as_ref().unwrap_or_else(|| <super::common::SundryThings as ::protobuf::Message>::default_instance())
    }

    // .DateTime added_on = 350;


    pub fn get_added_on(&self) -> &super::common::DateTime {
        self.added_on.as_ref().unwrap_or_else(|| <super::common::DateTime as ::protobuf::Message>::default_instance())
    }
}

impl ::protobuf::Message for GameTranslator {
    fn is_initialized(&self) -> bool {
        for v in &self.established {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sundry {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.added_on {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.established)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sundry)?;
                },
                350 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.added_on)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if let Some(ref v) = self.established.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.description);
        }
        if let Some(ref v) = self.sundry.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if let Some(ref v) = self.established.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.description.is_empty() {
            os.write_string(4, &self.description)?;
        }
        if let Some(ref v) = self.sundry.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            os.write_tag(350, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GameTranslator {
        GameTranslator::new()
    }

    fn default_instance() -> &'static GameTranslator {
        static instance: ::protobuf::rt::LazyV2<GameTranslator> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GameTranslator::new)
    }
}

impl ::protobuf::Clear for GameTranslator {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.established.clear();
        self.description.clear();
        self.sundry.clear();
        self.added_on.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for GameTranslator {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct GameSeries {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub developer: u32,
    pub studio: u32,
    pub translator: u32,
    pub description: ::std::string::String,
    pub sundry: ::protobuf::SingularPtrField<super::common::SundryThings>,
    pub added_on: ::protobuf::SingularPtrField<super::common::DateTime>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GameSeries {
    fn default() -> &'a GameSeries {
        <GameSeries as ::protobuf::Message>::default_instance()
    }
}

impl GameSeries {
    pub fn new() -> GameSeries {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }

    // uint32 developer = 3;


    pub fn get_developer(&self) -> u32 {
        self.developer
    }

    // uint32 studio = 4;


    pub fn get_studio(&self) -> u32 {
        self.studio
    }

    // uint32 translator = 5;


    pub fn get_translator(&self) -> u32 {
        self.translator
    }

    // string description = 6;


    pub fn get_description(&self) -> &str {
        &self.description
    }

    // .SundryThings sundry = 7;


    pub fn get_sundry(&self) -> &super::common::SundryThings {
        self.sundry.as_ref().unwrap_or_else(|| <super::common::SundryThings as ::protobuf::Message>::default_instance())
    }

    // .DateTime added_on = 350;


    pub fn get_added_on(&self) -> &super::common::DateTime {
        self.added_on.as_ref().unwrap_or_else(|| <super::common::DateTime as ::protobuf::Message>::default_instance())
    }
}

impl ::protobuf::Message for GameSeries {
    fn is_initialized(&self) -> bool {
        for v in &self.sundry {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.added_on {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.developer = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.studio = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.translator = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sundry)?;
                },
                350 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.added_on)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.developer != 0 {
            my_size += ::protobuf::rt::value_size(3, self.developer, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.studio != 0 {
            my_size += ::protobuf::rt::value_size(4, self.studio, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.translator != 0 {
            my_size += ::protobuf::rt::value_size(5, self.translator, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.description);
        }
        if let Some(ref v) = self.sundry.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.developer != 0 {
            os.write_uint32(3, self.developer)?;
        }
        if self.studio != 0 {
            os.write_uint32(4, self.studio)?;
        }
        if self.translator != 0 {
            os.write_uint32(5, self.translator)?;
        }
        if !self.description.is_empty() {
            os.write_string(6, &self.description)?;
        }
        if let Some(ref v) = self.sundry.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            os.write_tag(350, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GameSeries {
        GameSeries::new()
    }

    fn default_instance() -> &'static GameSeries {
        static instance: ::protobuf::rt::LazyV2<GameSeries> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GameSeries::new)
    }
}

impl ::protobuf::Clear for GameSeries {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.developer = 0;
        self.studio = 0;
        self.translator = 0;
        self.description.clear();
        self.sundry.clear();
        self.added_on.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for GameSeries {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Release {
    // message fields
    pub name: ::std::string::String,
    pub developer: u32,
    pub studio: u32,
    pub translator: u32,
    pub release_date: ::protobuf::SingularPtrField<super::common::Date>,
    pub description: ::std::string::String,
    pub own: super::common::Ownership,
    pub links: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Release {
    fn default() -> &'a Release {
        <Release as ::protobuf::Message>::default_instance()
    }
}

impl Release {
    pub fn new() -> Release {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }

    // uint32 developer = 2;


    pub fn get_developer(&self) -> u32 {
        self.developer
    }

    // uint32 studio = 3;


    pub fn get_studio(&self) -> u32 {
        self.studio
    }

    // uint32 translator = 4;


    pub fn get_translator(&self) -> u32 {
        self.translator
    }

    // .Date release_date = 5;


    pub fn get_release_date(&self) -> &super::common::Date {
        self.release_date.as_ref().unwrap_or_else(|| <super::common::Date as ::protobuf::Message>::default_instance())
    }

    // string description = 6;


    pub fn get_description(&self) -> &str {
        &self.description
    }

    // .Ownership own = 7;


    pub fn get_own(&self) -> super::common::Ownership {
        self.own
    }

    // repeated .Release.links_MapEntry links = 8;


    pub fn get_links(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.links
    }
}

impl ::protobuf::Message for Release {
    fn is_initialized(&self) -> bool {
        for v in &self.release_date {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.developer = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.studio = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.translator = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.release_date)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.own, 7, &mut self.unknown_fields)?
                },
                8 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.links)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.developer != 0 {
            my_size += ::protobuf::rt::value_size(2, self.developer, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.studio != 0 {
            my_size += ::protobuf::rt::value_size(3, self.studio, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.translator != 0 {
            my_size += ::protobuf::rt::value_size(4, self.translator, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.release_date.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.description);
        }
        if self.own != super::common::Ownership::NOT_SPECIFIED {
            my_size += ::protobuf::rt::enum_size(7, self.own);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(8, &self.links);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.developer != 0 {
            os.write_uint32(2, self.developer)?;
        }
        if self.studio != 0 {
            os.write_uint32(3, self.studio)?;
        }
        if self.translator != 0 {
            os.write_uint32(4, self.translator)?;
        }
        if let Some(ref v) = self.release_date.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.description.is_empty() {
            os.write_string(6, &self.description)?;
        }
        if self.own != super::common::Ownership::NOT_SPECIFIED {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&self.own))?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(8, &self.links, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Release {
        Release::new()
    }

    fn default_instance() -> &'static Release {
        static instance: ::protobuf::rt::LazyV2<Release> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Release::new)
    }
}

impl ::protobuf::Clear for Release {
    fn clear(&mut self) {
        self.name.clear();
        self.developer = 0;
        self.studio = 0;
        self.translator = 0;
        self.release_date.clear();
        self.description.clear();
        self.own = super::common::Ownership::NOT_SPECIFIED;
        self.links.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Release {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CharacterApperance {
    // message fields
    pub charater_id: ::std::string::String,
    pub tag_ids: ::protobuf::RepeatedField<::std::string::String>,
    pub notes: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CharacterApperance {
    fn default() -> &'a CharacterApperance {
        <CharacterApperance as ::protobuf::Message>::default_instance()
    }
}

impl CharacterApperance {
    pub fn new() -> CharacterApperance {
        ::std::default::Default::default()
    }

    // string charater_id = 1;


    pub fn get_charater_id(&self) -> &str {
        &self.charater_id
    }

    // repeated string tag_ids = 2;


    pub fn get_tag_ids(&self) -> &[::std::string::String] {
        &self.tag_ids
    }

    // string notes = 3;


    pub fn get_notes(&self) -> &str {
        &self.notes
    }
}

impl ::protobuf::Message for CharacterApperance {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.charater_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tag_ids)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.notes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.charater_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.charater_id);
        }
        for value in &self.tag_ids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.notes.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.notes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.charater_id.is_empty() {
            os.write_string(1, &self.charater_id)?;
        }
        for v in &self.tag_ids {
            os.write_string(2, &v)?;
        };
        if !self.notes.is_empty() {
            os.write_string(3, &self.notes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CharacterApperance {
        CharacterApperance::new()
    }

    fn default_instance() -> &'static CharacterApperance {
        static instance: ::protobuf::rt::LazyV2<CharacterApperance> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CharacterApperance::new)
    }
}

impl ::protobuf::Clear for CharacterApperance {
    fn clear(&mut self) {
        self.charater_id.clear();
        self.tag_ids.clear();
        self.notes.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CharacterApperance {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Game {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub developer: u32,
    pub studio: u32,
    pub translator: u32,
    pub releases: ::protobuf::RepeatedField<Release>,
    pub characters: ::protobuf::RepeatedField<CharacterApperance>,
    pub description: ::std::string::String,
    pub path: ::std::string::String,
    pub sundry: ::protobuf::SingularPtrField<super::common::SundryThings>,
    pub added_on: ::protobuf::SingularPtrField<super::common::DateTime>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Game {
    fn default() -> &'a Game {
        <Game as ::protobuf::Message>::default_instance()
    }
}

impl Game {
    pub fn new() -> Game {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }

    // uint32 developer = 3;


    pub fn get_developer(&self) -> u32 {
        self.developer
    }

    // uint32 studio = 4;


    pub fn get_studio(&self) -> u32 {
        self.studio
    }

    // uint32 translator = 5;


    pub fn get_translator(&self) -> u32 {
        self.translator
    }

    // repeated .Release releases = 6;


    pub fn get_releases(&self) -> &[Release] {
        &self.releases
    }

    // repeated .CharacterApperance characters = 7;


    pub fn get_characters(&self) -> &[CharacterApperance] {
        &self.characters
    }

    // string description = 8;


    pub fn get_description(&self) -> &str {
        &self.description
    }

    // string path = 9;


    pub fn get_path(&self) -> &str {
        &self.path
    }

    // .SundryThings sundry = 10;


    pub fn get_sundry(&self) -> &super::common::SundryThings {
        self.sundry.as_ref().unwrap_or_else(|| <super::common::SundryThings as ::protobuf::Message>::default_instance())
    }

    // .DateTime added_on = 350;


    pub fn get_added_on(&self) -> &super::common::DateTime {
        self.added_on.as_ref().unwrap_or_else(|| <super::common::DateTime as ::protobuf::Message>::default_instance())
    }
}

impl ::protobuf::Message for Game {
    fn is_initialized(&self) -> bool {
        for v in &self.releases {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.characters {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sundry {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.added_on {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.developer = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.studio = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.translator = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.releases)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.characters)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sundry)?;
                },
                350 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.added_on)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.developer != 0 {
            my_size += ::protobuf::rt::value_size(3, self.developer, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.studio != 0 {
            my_size += ::protobuf::rt::value_size(4, self.studio, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.translator != 0 {
            my_size += ::protobuf::rt::value_size(5, self.translator, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.releases {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.characters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.description);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.path);
        }
        if let Some(ref v) = self.sundry.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.developer != 0 {
            os.write_uint32(3, self.developer)?;
        }
        if self.studio != 0 {
            os.write_uint32(4, self.studio)?;
        }
        if self.translator != 0 {
            os.write_uint32(5, self.translator)?;
        }
        for v in &self.releases {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.characters {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.description.is_empty() {
            os.write_string(8, &self.description)?;
        }
        if !self.path.is_empty() {
            os.write_string(9, &self.path)?;
        }
        if let Some(ref v) = self.sundry.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            os.write_tag(350, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Game {
        Game::new()
    }

    fn default_instance() -> &'static Game {
        static instance: ::protobuf::rt::LazyV2<Game> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Game::new)
    }
}

impl ::protobuf::Clear for Game {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.developer = 0;
        self.studio = 0;
        self.translator = 0;
        self.releases.clear();
        self.characters.clear();
        self.description.clear();
        self.path.clear();
        self.sundry.clear();
        self.added_on.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Game {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}
