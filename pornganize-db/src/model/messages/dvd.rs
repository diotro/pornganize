// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `dvd.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Dvd {
    // message fields
    pub id: ::std::string::String,
    pub title: ::std::string::String,
    pub own: super::common::Ownership,
    pub released: ::protobuf::SingularPtrField<super::common::Date>,
    pub language: ::std::string::String,
    pub actor_ids: ::protobuf::RepeatedField<::std::string::String>,
    pub tag_ids: ::protobuf::RepeatedField<::std::string::String>,
    pub custom_fields: ::protobuf::RepeatedField<super::common::CustomFieldValue>,
    pub duration: u64,
    pub added_on: ::protobuf::SingularPtrField<super::common::DateTime>,
    // message oneof groups
    pub source: ::std::option::Option<Dvd_oneof_source>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Dvd {
    fn default() -> &'a Dvd {
        <Dvd as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum Dvd_oneof_source {
    studio_id(::std::string::String),
    network_id(::std::string::String),
    site_id(::std::string::String),
}

impl Dvd {
    pub fn new() -> Dvd {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }

    // string title = 2;


    pub fn get_title(&self) -> &str {
        &self.title
    }

    // .Ownership own = 3;


    pub fn get_own(&self) -> super::common::Ownership {
        self.own
    }

    // string studio_id = 4;


    pub fn get_studio_id(&self) -> &str {
        match self.source {
            ::std::option::Option::Some(Dvd_oneof_source::studio_id(ref v)) => v,
            _ => "",
        }
    }

    // string network_id = 5;


    pub fn get_network_id(&self) -> &str {
        match self.source {
            ::std::option::Option::Some(Dvd_oneof_source::network_id(ref v)) => v,
            _ => "",
        }
    }

    // string site_id = 6;


    pub fn get_site_id(&self) -> &str {
        match self.source {
            ::std::option::Option::Some(Dvd_oneof_source::site_id(ref v)) => v,
            _ => "",
        }
    }

    // .Date released = 7;


    pub fn get_released(&self) -> &super::common::Date {
        self.released.as_ref().unwrap_or_else(|| <super::common::Date as ::protobuf::Message>::default_instance())
    }

    // string language = 8;


    pub fn get_language(&self) -> &str {
        &self.language
    }

    // repeated string actor_ids = 9;


    pub fn get_actor_ids(&self) -> &[::std::string::String] {
        &self.actor_ids
    }

    // repeated string tag_ids = 10;


    pub fn get_tag_ids(&self) -> &[::std::string::String] {
        &self.tag_ids
    }

    // repeated .CustomFieldValue custom_fields = 11;


    pub fn get_custom_fields(&self) -> &[super::common::CustomFieldValue] {
        &self.custom_fields
    }

    // uint64 duration = 13;


    pub fn get_duration(&self) -> u64 {
        self.duration
    }

    // .DateTime added_on = 350;


    pub fn get_added_on(&self) -> &super::common::DateTime {
        self.added_on.as_ref().unwrap_or_else(|| <super::common::DateTime as ::protobuf::Message>::default_instance())
    }
}

impl ::protobuf::Message for Dvd {
    fn is_initialized(&self) -> bool {
        for v in &self.released {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.custom_fields {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.added_on {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.own, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.source = ::std::option::Option::Some(Dvd_oneof_source::studio_id(is.read_string()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.source = ::std::option::Option::Some(Dvd_oneof_source::network_id(is.read_string()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.source = ::std::option::Option::Some(Dvd_oneof_source::site_id(is.read_string()?));
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.released)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.language)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.actor_ids)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tag_ids)?;
                },
                11 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.custom_fields)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.duration = tmp;
                },
                350 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.added_on)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if self.own != super::common::Ownership::NOT_SPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.own);
        }
        if let Some(ref v) = self.released.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.language.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.language);
        }
        for value in &self.actor_ids {
            my_size += ::protobuf::rt::string_size(9, &value);
        };
        for value in &self.tag_ids {
            my_size += ::protobuf::rt::string_size(10, &value);
        };
        for value in &self.custom_fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.duration != 0 {
            my_size += ::protobuf::rt::value_size(13, self.duration, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.added_on.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.source {
            match v {
                &Dvd_oneof_source::studio_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
                &Dvd_oneof_source::network_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(5, &v);
                },
                &Dvd_oneof_source::site_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(6, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if self.own != super::common::Ownership::NOT_SPECIFIED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.own))?;
        }
        if let Some(ref v) = self.released.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.language.is_empty() {
            os.write_string(8, &self.language)?;
        }
        for v in &self.actor_ids {
            os.write_string(9, &v)?;
        };
        for v in &self.tag_ids {
            os.write_string(10, &v)?;
        };
        for v in &self.custom_fields {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.duration != 0 {
            os.write_uint64(13, self.duration)?;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            os.write_tag(350, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.source {
            match v {
                &Dvd_oneof_source::studio_id(ref v) => {
                    os.write_string(4, v)?;
                },
                &Dvd_oneof_source::network_id(ref v) => {
                    os.write_string(5, v)?;
                },
                &Dvd_oneof_source::site_id(ref v) => {
                    os.write_string(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Dvd {
        Dvd::new()
    }

    fn default_instance() -> &'static Dvd {
        static instance: ::protobuf::rt::LazyV2<Dvd> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Dvd::new)
    }
}

impl ::protobuf::Clear for Dvd {
    fn clear(&mut self) {
        self.id.clear();
        self.title.clear();
        self.own = super::common::Ownership::NOT_SPECIFIED;
        self.source = ::std::option::Option::None;
        self.source = ::std::option::Option::None;
        self.source = ::std::option::Option::None;
        self.released.clear();
        self.language.clear();
        self.actor_ids.clear();
        self.tag_ids.clear();
        self.custom_fields.clear();
        self.duration = 0;
        self.added_on.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Dvd {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}
