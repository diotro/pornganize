// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `actor.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ActorImages {
    // message fields
    pub avatar: ::std::string::String,
    pub banner: ::std::string::String,
    pub profile1: ::std::string::String,
    pub profile2: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ActorImages {
    fn default() -> &'a ActorImages {
        <ActorImages as ::protobuf::Message>::default_instance()
    }
}

impl ActorImages {
    pub fn new() -> ActorImages {
        ::std::default::Default::default()
    }

    // string avatar = 1;


    pub fn get_avatar(&self) -> &str {
        &self.avatar
    }

    // string banner = 2;


    pub fn get_banner(&self) -> &str {
        &self.banner
    }

    // string profile1 = 3;


    pub fn get_profile1(&self) -> &str {
        &self.profile1
    }

    // string profile2 = 4;


    pub fn get_profile2(&self) -> &str {
        &self.profile2
    }
}

impl ::protobuf::Message for ActorImages {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.avatar)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.banner)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.profile1)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.profile2)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.avatar.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.avatar);
        }
        if !self.banner.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.banner);
        }
        if !self.profile1.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.profile1);
        }
        if !self.profile2.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.profile2);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.avatar.is_empty() {
            os.write_string(1, &self.avatar)?;
        }
        if !self.banner.is_empty() {
            os.write_string(2, &self.banner)?;
        }
        if !self.profile1.is_empty() {
            os.write_string(3, &self.profile1)?;
        }
        if !self.profile2.is_empty() {
            os.write_string(4, &self.profile2)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ActorImages {
        ActorImages::new()
    }

    fn default_instance() -> &'static ActorImages {
        static instance: ::protobuf::rt::LazyV2<ActorImages> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ActorImages::new)
    }
}

impl ::protobuf::Clear for ActorImages {
    fn clear(&mut self) {
        self.avatar.clear();
        self.banner.clear();
        self.profile1.clear();
        self.profile2.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ActorImages {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct CareerStatus {
    // message fields
    pub started: ::protobuf::SingularPtrField<super::common::Date>,
    pub is_active: bool,
    pub retried: ::protobuf::SingularPtrField<super::common::Date>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CareerStatus {
    fn default() -> &'a CareerStatus {
        <CareerStatus as ::protobuf::Message>::default_instance()
    }
}

impl CareerStatus {
    pub fn new() -> CareerStatus {
        ::std::default::Default::default()
    }

    // .Date started = 1;


    pub fn get_started(&self) -> &super::common::Date {
        self.started.as_ref().unwrap_or_else(|| <super::common::Date as ::protobuf::Message>::default_instance())
    }

    // bool is_active = 2;


    pub fn get_is_active(&self) -> bool {
        self.is_active
    }

    // .Date retried = 3;


    pub fn get_retried(&self) -> &super::common::Date {
        self.retried.as_ref().unwrap_or_else(|| <super::common::Date as ::protobuf::Message>::default_instance())
    }
}

impl ::protobuf::Message for CareerStatus {
    fn is_initialized(&self) -> bool {
        for v in &self.started {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.retried {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.started)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_active = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.retried)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.started.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.is_active != false {
            my_size += 2;
        }
        if let Some(ref v) = self.retried.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.started.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.is_active != false {
            os.write_bool(2, self.is_active)?;
        }
        if let Some(ref v) = self.retried.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CareerStatus {
        CareerStatus::new()
    }

    fn default_instance() -> &'static CareerStatus {
        static instance: ::protobuf::rt::LazyV2<CareerStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CareerStatus::new)
    }
}

impl ::protobuf::Clear for CareerStatus {
    fn clear(&mut self) {
        self.started.clear();
        self.is_active = false;
        self.retried.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CareerStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Actor {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub aliases: ::protobuf::RepeatedField<::std::string::String>,
    pub name_patterns: ::protobuf::RepeatedField<::std::string::String>,
    pub gender: ::protobuf::SingularPtrField<super::common::Gender>,
    pub nationality: ::std::string::String,
    pub dob: ::protobuf::SingularPtrField<super::common::Date>,
    pub description: ::std::string::String,
    pub career_status: ::protobuf::SingularPtrField<CareerStatus>,
    pub images: ::protobuf::SingularPtrField<ActorImages>,
    pub sundry: ::protobuf::SingularPtrField<super::common::SundryThings>,
    pub added_on: ::protobuf::SingularPtrField<super::common::DateTime>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Actor {
    fn default() -> &'a Actor {
        <Actor as ::protobuf::Message>::default_instance()
    }
}

impl Actor {
    pub fn new() -> Actor {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }

    // repeated string aliases = 3;


    pub fn get_aliases(&self) -> &[::std::string::String] {
        &self.aliases
    }

    // repeated string name_patterns = 4;


    pub fn get_name_patterns(&self) -> &[::std::string::String] {
        &self.name_patterns
    }

    // .Gender gender = 5;


    pub fn get_gender(&self) -> &super::common::Gender {
        self.gender.as_ref().unwrap_or_else(|| <super::common::Gender as ::protobuf::Message>::default_instance())
    }

    // string nationality = 7;


    pub fn get_nationality(&self) -> &str {
        &self.nationality
    }

    // .Date dob = 8;


    pub fn get_dob(&self) -> &super::common::Date {
        self.dob.as_ref().unwrap_or_else(|| <super::common::Date as ::protobuf::Message>::default_instance())
    }

    // string description = 9;


    pub fn get_description(&self) -> &str {
        &self.description
    }

    // .CareerStatus career_status = 10;


    pub fn get_career_status(&self) -> &CareerStatus {
        self.career_status.as_ref().unwrap_or_else(|| <CareerStatus as ::protobuf::Message>::default_instance())
    }

    // .ActorImages images = 11;


    pub fn get_images(&self) -> &ActorImages {
        self.images.as_ref().unwrap_or_else(|| <ActorImages as ::protobuf::Message>::default_instance())
    }

    // .SundryThings sundry = 12;


    pub fn get_sundry(&self) -> &super::common::SundryThings {
        self.sundry.as_ref().unwrap_or_else(|| <super::common::SundryThings as ::protobuf::Message>::default_instance())
    }

    // .DateTime added_on = 350;


    pub fn get_added_on(&self) -> &super::common::DateTime {
        self.added_on.as_ref().unwrap_or_else(|| <super::common::DateTime as ::protobuf::Message>::default_instance())
    }
}

impl ::protobuf::Message for Actor {
    fn is_initialized(&self) -> bool {
        for v in &self.gender {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.dob {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.career_status {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.images {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sundry {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.added_on {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.aliases)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.name_patterns)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gender)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nationality)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dob)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.career_status)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.images)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sundry)?;
                },
                350 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.added_on)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        for value in &self.aliases {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.name_patterns {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if let Some(ref v) = self.gender.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.nationality.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.nationality);
        }
        if let Some(ref v) = self.dob.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.description);
        }
        if let Some(ref v) = self.career_status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.images.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.sundry.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        for v in &self.aliases {
            os.write_string(3, &v)?;
        };
        for v in &self.name_patterns {
            os.write_string(4, &v)?;
        };
        if let Some(ref v) = self.gender.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.nationality.is_empty() {
            os.write_string(7, &self.nationality)?;
        }
        if let Some(ref v) = self.dob.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.description.is_empty() {
            os.write_string(9, &self.description)?;
        }
        if let Some(ref v) = self.career_status.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.images.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.sundry.as_ref() {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            os.write_tag(350, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Actor {
        Actor::new()
    }

    fn default_instance() -> &'static Actor {
        static instance: ::protobuf::rt::LazyV2<Actor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Actor::new)
    }
}

impl ::protobuf::Clear for Actor {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.aliases.clear();
        self.name_patterns.clear();
        self.gender.clear();
        self.nationality.clear();
        self.dob.clear();
        self.description.clear();
        self.career_status.clear();
        self.images.clear();
        self.sundry.clear();
        self.added_on.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Actor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}
