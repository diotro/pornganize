// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `network.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct Network {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub banner: ::std::string::String,
    pub logo: ::std::string::String,
    pub website: ::std::string::String,
    pub established: ::protobuf::SingularPtrField<super::common::Date>,
    pub description: ::std::string::String,
    pub studio_id: ::std::string::String,
    pub added_on: ::protobuf::SingularPtrField<super::common::DateTime>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Network {
    fn default() -> &'a Network {
        <Network as ::protobuf::Message>::default_instance()
    }
}

impl Network {
    pub fn new() -> Network {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string banner = 3;


    pub fn get_banner(&self) -> &str {
        &self.banner
    }
    pub fn clear_banner(&mut self) {
        self.banner.clear();
    }

    // Param is passed by value, moved
    pub fn set_banner(&mut self, v: ::std::string::String) {
        self.banner = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_banner(&mut self) -> &mut ::std::string::String {
        &mut self.banner
    }

    // Take field
    pub fn take_banner(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.banner, ::std::string::String::new())
    }

    // string logo = 4;


    pub fn get_logo(&self) -> &str {
        &self.logo
    }
    pub fn clear_logo(&mut self) {
        self.logo.clear();
    }

    // Param is passed by value, moved
    pub fn set_logo(&mut self, v: ::std::string::String) {
        self.logo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logo(&mut self) -> &mut ::std::string::String {
        &mut self.logo
    }

    // Take field
    pub fn take_logo(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.logo, ::std::string::String::new())
    }

    // string website = 5;


    pub fn get_website(&self) -> &str {
        &self.website
    }
    pub fn clear_website(&mut self) {
        self.website.clear();
    }

    // Param is passed by value, moved
    pub fn set_website(&mut self, v: ::std::string::String) {
        self.website = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_website(&mut self) -> &mut ::std::string::String {
        &mut self.website
    }

    // Take field
    pub fn take_website(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.website, ::std::string::String::new())
    }

    // .Date established = 6;


    pub fn get_established(&self) -> &super::common::Date {
        self.established.as_ref().unwrap_or_else(|| <super::common::Date as ::protobuf::Message>::default_instance())
    }
    pub fn clear_established(&mut self) {
        self.established.clear();
    }

    pub fn has_established(&self) -> bool {
        self.established.is_some()
    }

    // Param is passed by value, moved
    pub fn set_established(&mut self, v: super::common::Date) {
        self.established = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_established(&mut self) -> &mut super::common::Date {
        if self.established.is_none() {
            self.established.set_default();
        }
        self.established.as_mut().unwrap()
    }

    // Take field
    pub fn take_established(&mut self) -> super::common::Date {
        self.established.take().unwrap_or_else(|| super::common::Date::new())
    }

    // string description = 7;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string studio_id = 8;


    pub fn get_studio_id(&self) -> &str {
        &self.studio_id
    }
    pub fn clear_studio_id(&mut self) {
        self.studio_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_studio_id(&mut self, v: ::std::string::String) {
        self.studio_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_studio_id(&mut self) -> &mut ::std::string::String {
        &mut self.studio_id
    }

    // Take field
    pub fn take_studio_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.studio_id, ::std::string::String::new())
    }

    // .DateTime added_on = 350;


    pub fn get_added_on(&self) -> &super::common::DateTime {
        self.added_on.as_ref().unwrap_or_else(|| <super::common::DateTime as ::protobuf::Message>::default_instance())
    }
    pub fn clear_added_on(&mut self) {
        self.added_on.clear();
    }

    pub fn has_added_on(&self) -> bool {
        self.added_on.is_some()
    }

    // Param is passed by value, moved
    pub fn set_added_on(&mut self, v: super::common::DateTime) {
        self.added_on = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_added_on(&mut self) -> &mut super::common::DateTime {
        if self.added_on.is_none() {
            self.added_on.set_default();
        }
        self.added_on.as_mut().unwrap()
    }

    // Take field
    pub fn take_added_on(&mut self) -> super::common::DateTime {
        self.added_on.take().unwrap_or_else(|| super::common::DateTime::new())
    }
}

impl ::protobuf::Message for Network {
    fn is_initialized(&self) -> bool {
        for v in &self.established {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.added_on {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.banner)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.logo)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.website)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.established)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.studio_id)?;
                },
                350 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.added_on)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.banner.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.banner);
        }
        if !self.logo.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.logo);
        }
        if !self.website.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.website);
        }
        if let Some(ref v) = self.established.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.description);
        }
        if !self.studio_id.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.studio_id);
        }
        if let Some(ref v) = self.added_on.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.banner.is_empty() {
            os.write_string(3, &self.banner)?;
        }
        if !self.logo.is_empty() {
            os.write_string(4, &self.logo)?;
        }
        if !self.website.is_empty() {
            os.write_string(5, &self.website)?;
        }
        if let Some(ref v) = self.established.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.description.is_empty() {
            os.write_string(7, &self.description)?;
        }
        if !self.studio_id.is_empty() {
            os.write_string(8, &self.studio_id)?;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            os.write_tag(350, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Network {
        Network::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Network| { &m.id },
                |m: &mut Network| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Network| { &m.name },
                |m: &mut Network| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "banner",
                |m: &Network| { &m.banner },
                |m: &mut Network| { &mut m.banner },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "logo",
                |m: &Network| { &m.logo },
                |m: &mut Network| { &mut m.logo },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "website",
                |m: &Network| { &m.website },
                |m: &mut Network| { &mut m.website },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Date>>(
                "established",
                |m: &Network| { &m.established },
                |m: &mut Network| { &mut m.established },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &Network| { &m.description },
                |m: &mut Network| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "studio_id",
                |m: &Network| { &m.studio_id },
                |m: &mut Network| { &mut m.studio_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::DateTime>>(
                "added_on",
                |m: &Network| { &m.added_on },
                |m: &mut Network| { &mut m.added_on },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Network>(
                "Network",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Network {
        static instance: ::protobuf::rt::LazyV2<Network> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Network::new)
    }
}

impl ::protobuf::Clear for Network {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.banner.clear();
        self.logo.clear();
        self.website.clear();
        self.established.clear();
        self.description.clear();
        self.studio_id.clear();
        self.added_on.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Network {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Network {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rnetwork.proto\x1a\x0ccommon.proto\"\x82\x02\n\x07Network\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\
    \x04name\x12\x16\n\x06banner\x18\x03\x20\x01(\tR\x06banner\x12\x12\n\x04\
    logo\x18\x04\x20\x01(\tR\x04logo\x12\x18\n\x07website\x18\x05\x20\x01(\t\
    R\x07website\x12'\n\x0bestablished\x18\x06\x20\x01(\x0b2\x05.DateR\x0bes\
    tablished\x12\x20\n\x0bdescription\x18\x07\x20\x01(\tR\x0bdescription\
    \x12\x1b\n\tstudio_id\x18\x08\x20\x01(\tR\x08studioId\x12%\n\x08added_on\
    \x18\xde\x02\x20\x01(\x0b2\t.DateTimeR\x07addedOnJ\xa4\x04\n\x06\x12\x04\
    \0\0\x0e\x02\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\
    \0\x16\n\n\n\x02\x04\0\x12\x04\x04\0\x0e\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x04\x08\x0f\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x04\x12\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\x05\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\
    \x0b\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\x10\x11\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03\x06\x04\x14\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\
    \x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x06\x0b\x0f\n\x0c\n\x05\x04\
    \0\x02\x01\x03\x12\x03\x06\x12\x13\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x07\
    \x04\x16\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x07\x04\n\n\x0c\n\x05\x04\
    \0\x02\x02\x01\x12\x03\x07\x0b\x11\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\
    \x07\x14\x15\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x08\x04\x14\n\x0c\n\x05\
    \x04\0\x02\x03\x05\x12\x03\x08\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03\x08\x0b\x0f\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x08\x12\x13\n\x0b\
    \n\x04\x04\0\x02\x04\x12\x03\t\x04\x17\n\x0c\n\x05\x04\0\x02\x04\x05\x12\
    \x03\t\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\t\x0b\x12\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03\t\x15\x16\n\x0b\n\x04\x04\0\x02\x05\x12\x03\n\
    \x04\x19\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03\n\x04\x08\n\x0c\n\x05\x04\
    \0\x02\x05\x01\x12\x03\n\t\x14\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\n\
    \x17\x18\n\x0b\n\x04\x04\0\x02\x06\x12\x03\x0b\x04\x1b\n\x0c\n\x05\x04\0\
    \x02\x06\x05\x12\x03\x0b\x04\n\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x0b\
    \x0b\x16\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x0b\x19\x1a\n\x0b\n\x04\
    \x04\0\x02\x07\x12\x03\x0c\x04\x19\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03\
    \x0c\x04\n\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x0c\x0b\x14\n\x0c\n\x05\
    \x04\0\x02\x07\x03\x12\x03\x0c\x17\x18\n\x0b\n\x04\x04\0\x02\x08\x12\x03\
    \r\x04\x1c\n\x0c\n\x05\x04\0\x02\x08\x06\x12\x03\r\x04\x0c\n\x0c\n\x05\
    \x04\0\x02\x08\x01\x12\x03\r\r\x15\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\
    \r\x18\x1bb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
