// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `video.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct Marker {
    // message fields
    pub time: u64,
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub tag_ids: ::protobuf::RepeatedField<::std::string::String>,
    pub custom_fields: ::protobuf::RepeatedField<super::common::CustomFieldValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Marker {
    fn default() -> &'a Marker {
        <Marker as ::protobuf::Message>::default_instance()
    }
}

impl Marker {
    pub fn new() -> Marker {
        ::std::default::Default::default()
    }

    // uint64 time = 1;


    pub fn get_time(&self) -> u64 {
        self.time
    }
    pub fn clear_time(&mut self) {
        self.time = 0;
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: u64) {
        self.time = v;
    }

    // string title = 2;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // repeated string tag_ids = 4;


    pub fn get_tag_ids(&self) -> &[::std::string::String] {
        &self.tag_ids
    }
    pub fn clear_tag_ids(&mut self) {
        self.tag_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_tag_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.tag_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tag_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.tag_ids
    }

    // Take field
    pub fn take_tag_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.tag_ids, ::protobuf::RepeatedField::new())
    }

    // repeated .CustomFieldValue custom_fields = 5;


    pub fn get_custom_fields(&self) -> &[super::common::CustomFieldValue] {
        &self.custom_fields
    }
    pub fn clear_custom_fields(&mut self) {
        self.custom_fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom_fields(&mut self, v: ::protobuf::RepeatedField<super::common::CustomFieldValue>) {
        self.custom_fields = v;
    }

    // Mutable pointer to the field.
    pub fn mut_custom_fields(&mut self) -> &mut ::protobuf::RepeatedField<super::common::CustomFieldValue> {
        &mut self.custom_fields
    }

    // Take field
    pub fn take_custom_fields(&mut self) -> ::protobuf::RepeatedField<super::common::CustomFieldValue> {
        ::std::mem::replace(&mut self.custom_fields, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Marker {
    fn is_initialized(&self) -> bool {
        for v in &self.custom_fields {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.time = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tag_ids)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.custom_fields)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.time != 0 {
            my_size += ::protobuf::rt::value_size(1, self.time, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        for value in &self.tag_ids {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        for value in &self.custom_fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.time != 0 {
            os.write_uint64(1, self.time)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        for v in &self.tag_ids {
            os.write_string(4, &v)?;
        };
        for v in &self.custom_fields {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Marker {
        Marker::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "time",
                |m: &Marker| { &m.time },
                |m: &mut Marker| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &Marker| { &m.title },
                |m: &mut Marker| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &Marker| { &m.description },
                |m: &mut Marker| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tag_ids",
                |m: &Marker| { &m.tag_ids },
                |m: &mut Marker| { &mut m.tag_ids },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::CustomFieldValue>>(
                "custom_fields",
                |m: &Marker| { &m.custom_fields },
                |m: &mut Marker| { &mut m.custom_fields },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Marker>(
                "Marker",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Marker {
        static instance: ::protobuf::rt::LazyV2<Marker> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Marker::new)
    }
}

impl ::protobuf::Clear for Marker {
    fn clear(&mut self) {
        self.time = 0;
        self.title.clear();
        self.description.clear();
        self.tag_ids.clear();
        self.custom_fields.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Marker {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Marker {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamInfo {
    // message fields
    pub codec: ::std::string::String,
    pub sample_rate: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamInfo {
    fn default() -> &'a StreamInfo {
        <StreamInfo as ::protobuf::Message>::default_instance()
    }
}

impl StreamInfo {
    pub fn new() -> StreamInfo {
        ::std::default::Default::default()
    }

    // string codec = 1;


    pub fn get_codec(&self) -> &str {
        &self.codec
    }
    pub fn clear_codec(&mut self) {
        self.codec.clear();
    }

    // Param is passed by value, moved
    pub fn set_codec(&mut self, v: ::std::string::String) {
        self.codec = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_codec(&mut self) -> &mut ::std::string::String {
        &mut self.codec
    }

    // Take field
    pub fn take_codec(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.codec, ::std::string::String::new())
    }

    // uint64 sample_rate = 2;


    pub fn get_sample_rate(&self) -> u64 {
        self.sample_rate
    }
    pub fn clear_sample_rate(&mut self) {
        self.sample_rate = 0;
    }

    // Param is passed by value, moved
    pub fn set_sample_rate(&mut self, v: u64) {
        self.sample_rate = v;
    }
}

impl ::protobuf::Message for StreamInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.codec)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sample_rate = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.codec.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.codec);
        }
        if self.sample_rate != 0 {
            my_size += ::protobuf::rt::value_size(2, self.sample_rate, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.codec.is_empty() {
            os.write_string(1, &self.codec)?;
        }
        if self.sample_rate != 0 {
            os.write_uint64(2, self.sample_rate)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamInfo {
        StreamInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "codec",
                |m: &StreamInfo| { &m.codec },
                |m: &mut StreamInfo| { &mut m.codec },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sample_rate",
                |m: &StreamInfo| { &m.sample_rate },
                |m: &mut StreamInfo| { &mut m.sample_rate },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StreamInfo>(
                "StreamInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StreamInfo {
        static instance: ::protobuf::rt::LazyV2<StreamInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamInfo::new)
    }
}

impl ::protobuf::Clear for StreamInfo {
    fn clear(&mut self) {
        self.codec.clear();
        self.sample_rate = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VideoMetadata {
    // message fields
    pub resolution: ::protobuf::SingularPtrField<VideoMetadata_Resolution>,
    pub audio: ::protobuf::SingularPtrField<StreamInfo>,
    pub video: ::protobuf::SingularPtrField<StreamInfo>,
    pub frame_rate: f32,
    pub file_size: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VideoMetadata {
    fn default() -> &'a VideoMetadata {
        <VideoMetadata as ::protobuf::Message>::default_instance()
    }
}

impl VideoMetadata {
    pub fn new() -> VideoMetadata {
        ::std::default::Default::default()
    }

    // .VideoMetadata.Resolution resolution = 1;


    pub fn get_resolution(&self) -> &VideoMetadata_Resolution {
        self.resolution.as_ref().unwrap_or_else(|| <VideoMetadata_Resolution as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resolution(&mut self) {
        self.resolution.clear();
    }

    pub fn has_resolution(&self) -> bool {
        self.resolution.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resolution(&mut self, v: VideoMetadata_Resolution) {
        self.resolution = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resolution(&mut self) -> &mut VideoMetadata_Resolution {
        if self.resolution.is_none() {
            self.resolution.set_default();
        }
        self.resolution.as_mut().unwrap()
    }

    // Take field
    pub fn take_resolution(&mut self) -> VideoMetadata_Resolution {
        self.resolution.take().unwrap_or_else(|| VideoMetadata_Resolution::new())
    }

    // .StreamInfo audio = 2;


    pub fn get_audio(&self) -> &StreamInfo {
        self.audio.as_ref().unwrap_or_else(|| <StreamInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_audio(&mut self) {
        self.audio.clear();
    }

    pub fn has_audio(&self) -> bool {
        self.audio.is_some()
    }

    // Param is passed by value, moved
    pub fn set_audio(&mut self, v: StreamInfo) {
        self.audio = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_audio(&mut self) -> &mut StreamInfo {
        if self.audio.is_none() {
            self.audio.set_default();
        }
        self.audio.as_mut().unwrap()
    }

    // Take field
    pub fn take_audio(&mut self) -> StreamInfo {
        self.audio.take().unwrap_or_else(|| StreamInfo::new())
    }

    // .StreamInfo video = 3;


    pub fn get_video(&self) -> &StreamInfo {
        self.video.as_ref().unwrap_or_else(|| <StreamInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_video(&mut self) {
        self.video.clear();
    }

    pub fn has_video(&self) -> bool {
        self.video.is_some()
    }

    // Param is passed by value, moved
    pub fn set_video(&mut self, v: StreamInfo) {
        self.video = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_video(&mut self) -> &mut StreamInfo {
        if self.video.is_none() {
            self.video.set_default();
        }
        self.video.as_mut().unwrap()
    }

    // Take field
    pub fn take_video(&mut self) -> StreamInfo {
        self.video.take().unwrap_or_else(|| StreamInfo::new())
    }

    // float frame_rate = 4;


    pub fn get_frame_rate(&self) -> f32 {
        self.frame_rate
    }
    pub fn clear_frame_rate(&mut self) {
        self.frame_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_frame_rate(&mut self, v: f32) {
        self.frame_rate = v;
    }

    // uint64 file_size = 5;


    pub fn get_file_size(&self) -> u64 {
        self.file_size
    }
    pub fn clear_file_size(&mut self) {
        self.file_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_file_size(&mut self, v: u64) {
        self.file_size = v;
    }
}

impl ::protobuf::Message for VideoMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.resolution {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.audio {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.video {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resolution)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.audio)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.video)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.frame_rate = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.file_size = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resolution.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.audio.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.video.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.frame_rate != 0. {
            my_size += 5;
        }
        if self.file_size != 0 {
            my_size += ::protobuf::rt::value_size(5, self.file_size, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resolution.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.audio.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.video.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.frame_rate != 0. {
            os.write_float(4, self.frame_rate)?;
        }
        if self.file_size != 0 {
            os.write_uint64(5, self.file_size)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VideoMetadata {
        VideoMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VideoMetadata_Resolution>>(
                "resolution",
                |m: &VideoMetadata| { &m.resolution },
                |m: &mut VideoMetadata| { &mut m.resolution },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StreamInfo>>(
                "audio",
                |m: &VideoMetadata| { &m.audio },
                |m: &mut VideoMetadata| { &mut m.audio },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StreamInfo>>(
                "video",
                |m: &VideoMetadata| { &m.video },
                |m: &mut VideoMetadata| { &mut m.video },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "frame_rate",
                |m: &VideoMetadata| { &m.frame_rate },
                |m: &mut VideoMetadata| { &mut m.frame_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "file_size",
                |m: &VideoMetadata| { &m.file_size },
                |m: &mut VideoMetadata| { &mut m.file_size },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VideoMetadata>(
                "VideoMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VideoMetadata {
        static instance: ::protobuf::rt::LazyV2<VideoMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VideoMetadata::new)
    }
}

impl ::protobuf::Clear for VideoMetadata {
    fn clear(&mut self) {
        self.resolution.clear();
        self.audio.clear();
        self.video.clear();
        self.frame_rate = 0.;
        self.file_size = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VideoMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VideoMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VideoMetadata_Resolution {
    // message fields
    pub height: u32,
    pub width: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VideoMetadata_Resolution {
    fn default() -> &'a VideoMetadata_Resolution {
        <VideoMetadata_Resolution as ::protobuf::Message>::default_instance()
    }
}

impl VideoMetadata_Resolution {
    pub fn new() -> VideoMetadata_Resolution {
        ::std::default::Default::default()
    }

    // uint32 height = 1;


    pub fn get_height(&self) -> u32 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u32) {
        self.height = v;
    }

    // uint32 width = 2;


    pub fn get_width(&self) -> u32 {
        self.width
    }
    pub fn clear_width(&mut self) {
        self.width = 0;
    }

    // Param is passed by value, moved
    pub fn set_width(&mut self, v: u32) {
        self.width = v;
    }
}

impl ::protobuf::Message for VideoMetadata_Resolution {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.height = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.width = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(1, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.width != 0 {
            my_size += ::protobuf::rt::value_size(2, self.width, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.height != 0 {
            os.write_uint32(1, self.height)?;
        }
        if self.width != 0 {
            os.write_uint32(2, self.width)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VideoMetadata_Resolution {
        VideoMetadata_Resolution::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "height",
                |m: &VideoMetadata_Resolution| { &m.height },
                |m: &mut VideoMetadata_Resolution| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "width",
                |m: &VideoMetadata_Resolution| { &m.width },
                |m: &mut VideoMetadata_Resolution| { &mut m.width },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VideoMetadata_Resolution>(
                "VideoMetadata.Resolution",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VideoMetadata_Resolution {
        static instance: ::protobuf::rt::LazyV2<VideoMetadata_Resolution> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VideoMetadata_Resolution::new)
    }
}

impl ::protobuf::Clear for VideoMetadata_Resolution {
    fn clear(&mut self) {
        self.height = 0;
        self.width = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VideoMetadata_Resolution {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VideoMetadata_Resolution {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Video {
    // message fields
    pub id: ::std::string::String,
    pub path: ::std::string::String,
    pub metadata: ::protobuf::SingularPtrField<VideoMetadata>,
    pub released: ::protobuf::SingularPtrField<super::common::Date>,
    pub language: ::std::string::String,
    pub actor_ids: ::protobuf::RepeatedField<::std::string::String>,
    pub tag_ids: ::protobuf::RepeatedField<::std::string::String>,
    pub custom_fields: ::protobuf::RepeatedField<super::common::CustomFieldValue>,
    pub markers: ::protobuf::RepeatedField<Marker>,
    pub duration: u64,
    pub added_on: ::protobuf::SingularPtrField<super::common::DateTime>,
    // message oneof groups
    pub source: ::std::option::Option<Video_oneof_source>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Video {
    fn default() -> &'a Video {
        <Video as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Video_oneof_source {
    studio_id(::std::string::String),
    network_id(::std::string::String),
    site_id(::std::string::String),
}

impl Video {
    pub fn new() -> Video {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string path = 2;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // .VideoMetadata metadata = 3;


    pub fn get_metadata(&self) -> &VideoMetadata {
        self.metadata.as_ref().unwrap_or_else(|| <VideoMetadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: VideoMetadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut VideoMetadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> VideoMetadata {
        self.metadata.take().unwrap_or_else(|| VideoMetadata::new())
    }

    // string studio_id = 4;


    pub fn get_studio_id(&self) -> &str {
        match self.source {
            ::std::option::Option::Some(Video_oneof_source::studio_id(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_studio_id(&mut self) {
        self.source = ::std::option::Option::None;
    }

    pub fn has_studio_id(&self) -> bool {
        match self.source {
            ::std::option::Option::Some(Video_oneof_source::studio_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_studio_id(&mut self, v: ::std::string::String) {
        self.source = ::std::option::Option::Some(Video_oneof_source::studio_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_studio_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Video_oneof_source::studio_id(_)) = self.source {
        } else {
            self.source = ::std::option::Option::Some(Video_oneof_source::studio_id(::std::string::String::new()));
        }
        match self.source {
            ::std::option::Option::Some(Video_oneof_source::studio_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_studio_id(&mut self) -> ::std::string::String {
        if self.has_studio_id() {
            match self.source.take() {
                ::std::option::Option::Some(Video_oneof_source::studio_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string network_id = 5;


    pub fn get_network_id(&self) -> &str {
        match self.source {
            ::std::option::Option::Some(Video_oneof_source::network_id(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_network_id(&mut self) {
        self.source = ::std::option::Option::None;
    }

    pub fn has_network_id(&self) -> bool {
        match self.source {
            ::std::option::Option::Some(Video_oneof_source::network_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_network_id(&mut self, v: ::std::string::String) {
        self.source = ::std::option::Option::Some(Video_oneof_source::network_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_network_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Video_oneof_source::network_id(_)) = self.source {
        } else {
            self.source = ::std::option::Option::Some(Video_oneof_source::network_id(::std::string::String::new()));
        }
        match self.source {
            ::std::option::Option::Some(Video_oneof_source::network_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_network_id(&mut self) -> ::std::string::String {
        if self.has_network_id() {
            match self.source.take() {
                ::std::option::Option::Some(Video_oneof_source::network_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string site_id = 6;


    pub fn get_site_id(&self) -> &str {
        match self.source {
            ::std::option::Option::Some(Video_oneof_source::site_id(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_site_id(&mut self) {
        self.source = ::std::option::Option::None;
    }

    pub fn has_site_id(&self) -> bool {
        match self.source {
            ::std::option::Option::Some(Video_oneof_source::site_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_site_id(&mut self, v: ::std::string::String) {
        self.source = ::std::option::Option::Some(Video_oneof_source::site_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_site_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Video_oneof_source::site_id(_)) = self.source {
        } else {
            self.source = ::std::option::Option::Some(Video_oneof_source::site_id(::std::string::String::new()));
        }
        match self.source {
            ::std::option::Option::Some(Video_oneof_source::site_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_site_id(&mut self) -> ::std::string::String {
        if self.has_site_id() {
            match self.source.take() {
                ::std::option::Option::Some(Video_oneof_source::site_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .Date released = 7;


    pub fn get_released(&self) -> &super::common::Date {
        self.released.as_ref().unwrap_or_else(|| <super::common::Date as ::protobuf::Message>::default_instance())
    }
    pub fn clear_released(&mut self) {
        self.released.clear();
    }

    pub fn has_released(&self) -> bool {
        self.released.is_some()
    }

    // Param is passed by value, moved
    pub fn set_released(&mut self, v: super::common::Date) {
        self.released = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_released(&mut self) -> &mut super::common::Date {
        if self.released.is_none() {
            self.released.set_default();
        }
        self.released.as_mut().unwrap()
    }

    // Take field
    pub fn take_released(&mut self) -> super::common::Date {
        self.released.take().unwrap_or_else(|| super::common::Date::new())
    }

    // string language = 8;


    pub fn get_language(&self) -> &str {
        &self.language
    }
    pub fn clear_language(&mut self) {
        self.language.clear();
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        &mut self.language
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.language, ::std::string::String::new())
    }

    // repeated string actor_ids = 9;


    pub fn get_actor_ids(&self) -> &[::std::string::String] {
        &self.actor_ids
    }
    pub fn clear_actor_ids(&mut self) {
        self.actor_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_actor_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.actor_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_actor_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.actor_ids
    }

    // Take field
    pub fn take_actor_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.actor_ids, ::protobuf::RepeatedField::new())
    }

    // repeated string tag_ids = 10;


    pub fn get_tag_ids(&self) -> &[::std::string::String] {
        &self.tag_ids
    }
    pub fn clear_tag_ids(&mut self) {
        self.tag_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_tag_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.tag_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tag_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.tag_ids
    }

    // Take field
    pub fn take_tag_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.tag_ids, ::protobuf::RepeatedField::new())
    }

    // repeated .CustomFieldValue custom_fields = 11;


    pub fn get_custom_fields(&self) -> &[super::common::CustomFieldValue] {
        &self.custom_fields
    }
    pub fn clear_custom_fields(&mut self) {
        self.custom_fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom_fields(&mut self, v: ::protobuf::RepeatedField<super::common::CustomFieldValue>) {
        self.custom_fields = v;
    }

    // Mutable pointer to the field.
    pub fn mut_custom_fields(&mut self) -> &mut ::protobuf::RepeatedField<super::common::CustomFieldValue> {
        &mut self.custom_fields
    }

    // Take field
    pub fn take_custom_fields(&mut self) -> ::protobuf::RepeatedField<super::common::CustomFieldValue> {
        ::std::mem::replace(&mut self.custom_fields, ::protobuf::RepeatedField::new())
    }

    // repeated .Marker markers = 12;


    pub fn get_markers(&self) -> &[Marker] {
        &self.markers
    }
    pub fn clear_markers(&mut self) {
        self.markers.clear();
    }

    // Param is passed by value, moved
    pub fn set_markers(&mut self, v: ::protobuf::RepeatedField<Marker>) {
        self.markers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_markers(&mut self) -> &mut ::protobuf::RepeatedField<Marker> {
        &mut self.markers
    }

    // Take field
    pub fn take_markers(&mut self) -> ::protobuf::RepeatedField<Marker> {
        ::std::mem::replace(&mut self.markers, ::protobuf::RepeatedField::new())
    }

    // uint64 duration = 13;


    pub fn get_duration(&self) -> u64 {
        self.duration
    }
    pub fn clear_duration(&mut self) {
        self.duration = 0;
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: u64) {
        self.duration = v;
    }

    // .DateTime added_on = 350;


    pub fn get_added_on(&self) -> &super::common::DateTime {
        self.added_on.as_ref().unwrap_or_else(|| <super::common::DateTime as ::protobuf::Message>::default_instance())
    }
    pub fn clear_added_on(&mut self) {
        self.added_on.clear();
    }

    pub fn has_added_on(&self) -> bool {
        self.added_on.is_some()
    }

    // Param is passed by value, moved
    pub fn set_added_on(&mut self, v: super::common::DateTime) {
        self.added_on = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_added_on(&mut self) -> &mut super::common::DateTime {
        if self.added_on.is_none() {
            self.added_on.set_default();
        }
        self.added_on.as_mut().unwrap()
    }

    // Take field
    pub fn take_added_on(&mut self) -> super::common::DateTime {
        self.added_on.take().unwrap_or_else(|| super::common::DateTime::new())
    }
}

impl ::protobuf::Message for Video {
    fn is_initialized(&self) -> bool {
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.released {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.custom_fields {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.markers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.added_on {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.source = ::std::option::Option::Some(Video_oneof_source::studio_id(is.read_string()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.source = ::std::option::Option::Some(Video_oneof_source::network_id(is.read_string()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.source = ::std::option::Option::Some(Video_oneof_source::site_id(is.read_string()?));
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.released)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.language)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.actor_ids)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tag_ids)?;
                },
                11 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.custom_fields)?;
                },
                12 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.markers)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.duration = tmp;
                },
                350 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.added_on)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.path);
        }
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.released.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.language.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.language);
        }
        for value in &self.actor_ids {
            my_size += ::protobuf::rt::string_size(9, &value);
        };
        for value in &self.tag_ids {
            my_size += ::protobuf::rt::string_size(10, &value);
        };
        for value in &self.custom_fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.markers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.duration != 0 {
            my_size += ::protobuf::rt::value_size(13, self.duration, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.added_on.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.source {
            match v {
                &Video_oneof_source::studio_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
                &Video_oneof_source::network_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(5, &v);
                },
                &Video_oneof_source::site_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(6, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.path.is_empty() {
            os.write_string(2, &self.path)?;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.released.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.language.is_empty() {
            os.write_string(8, &self.language)?;
        }
        for v in &self.actor_ids {
            os.write_string(9, &v)?;
        };
        for v in &self.tag_ids {
            os.write_string(10, &v)?;
        };
        for v in &self.custom_fields {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.markers {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.duration != 0 {
            os.write_uint64(13, self.duration)?;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            os.write_tag(350, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.source {
            match v {
                &Video_oneof_source::studio_id(ref v) => {
                    os.write_string(4, v)?;
                },
                &Video_oneof_source::network_id(ref v) => {
                    os.write_string(5, v)?;
                },
                &Video_oneof_source::site_id(ref v) => {
                    os.write_string(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Video {
        Video::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Video| { &m.id },
                |m: &mut Video| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &Video| { &m.path },
                |m: &mut Video| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VideoMetadata>>(
                "metadata",
                |m: &Video| { &m.metadata },
                |m: &mut Video| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "studio_id",
                Video::has_studio_id,
                Video::get_studio_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "network_id",
                Video::has_network_id,
                Video::get_network_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "site_id",
                Video::has_site_id,
                Video::get_site_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Date>>(
                "released",
                |m: &Video| { &m.released },
                |m: &mut Video| { &mut m.released },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "language",
                |m: &Video| { &m.language },
                |m: &mut Video| { &mut m.language },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "actor_ids",
                |m: &Video| { &m.actor_ids },
                |m: &mut Video| { &mut m.actor_ids },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tag_ids",
                |m: &Video| { &m.tag_ids },
                |m: &mut Video| { &mut m.tag_ids },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::CustomFieldValue>>(
                "custom_fields",
                |m: &Video| { &m.custom_fields },
                |m: &mut Video| { &mut m.custom_fields },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Marker>>(
                "markers",
                |m: &Video| { &m.markers },
                |m: &mut Video| { &mut m.markers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "duration",
                |m: &Video| { &m.duration },
                |m: &mut Video| { &mut m.duration },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::DateTime>>(
                "added_on",
                |m: &Video| { &m.added_on },
                |m: &mut Video| { &mut m.added_on },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Video>(
                "Video",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Video {
        static instance: ::protobuf::rt::LazyV2<Video> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Video::new)
    }
}

impl ::protobuf::Clear for Video {
    fn clear(&mut self) {
        self.id.clear();
        self.path.clear();
        self.metadata.clear();
        self.source = ::std::option::Option::None;
        self.source = ::std::option::Option::None;
        self.source = ::std::option::Option::None;
        self.released.clear();
        self.language.clear();
        self.actor_ids.clear();
        self.tag_ids.clear();
        self.custom_fields.clear();
        self.markers.clear();
        self.duration = 0;
        self.added_on.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Video {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Video {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bvideo.proto\x1a\x0ccommon.proto\"\xa5\x01\n\x06Marker\x12\x12\n\
    \x04time\x18\x01\x20\x01(\x04R\x04time\x12\x14\n\x05title\x18\x02\x20\
    \x01(\tR\x05title\x12\x20\n\x0bdescription\x18\x03\x20\x01(\tR\x0bdescri\
    ption\x12\x17\n\x07tag_ids\x18\x04\x20\x03(\tR\x06tagIds\x126\n\rcustom_\
    fields\x18\x05\x20\x03(\x0b2\x11.CustomFieldValueR\x0ccustomFields\"C\n\
    \nStreamInfo\x12\x14\n\x05codec\x18\x01\x20\x01(\tR\x05codec\x12\x1f\n\
    \x0bsample_rate\x18\x02\x20\x01(\x04R\nsampleRate\"\x88\x02\n\rVideoMeta\
    data\x129\n\nresolution\x18\x01\x20\x01(\x0b2\x19.VideoMetadata.Resoluti\
    onR\nresolution\x12!\n\x05audio\x18\x02\x20\x01(\x0b2\x0b.StreamInfoR\
    \x05audio\x12!\n\x05video\x18\x03\x20\x01(\x0b2\x0b.StreamInfoR\x05video\
    \x12\x1d\n\nframe_rate\x18\x04\x20\x01(\x02R\tframeRate\x12\x1b\n\tfile_\
    size\x18\x05\x20\x01(\x04R\x08fileSize\x1a:\n\nResolution\x12\x16\n\x06h\
    eight\x18\x01\x20\x01(\rR\x06height\x12\x14\n\x05width\x18\x02\x20\x01(\
    \rR\x05width\"\xcf\x03\n\x05Video\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\
    \x02id\x12\x12\n\x04path\x18\x02\x20\x01(\tR\x04path\x12*\n\x08metadata\
    \x18\x03\x20\x01(\x0b2\x0e.VideoMetadataR\x08metadata\x12\x1d\n\tstudio_\
    id\x18\x04\x20\x01(\tH\0R\x08studioId\x12\x1f\n\nnetwork_id\x18\x05\x20\
    \x01(\tH\0R\tnetworkId\x12\x19\n\x07site_id\x18\x06\x20\x01(\tH\0R\x06si\
    teId\x12!\n\x08released\x18\x07\x20\x01(\x0b2\x05.DateR\x08released\x12\
    \x1a\n\x08language\x18\x08\x20\x01(\tR\x08language\x12\x1b\n\tactor_ids\
    \x18\t\x20\x03(\tR\x08actorIds\x12\x17\n\x07tag_ids\x18\n\x20\x03(\tR\
    \x06tagIds\x126\n\rcustom_fields\x18\x0b\x20\x03(\x0b2\x11.CustomFieldVa\
    lueR\x0ccustomFields\x12!\n\x07markers\x18\x0c\x20\x03(\x0b2\x07.MarkerR\
    \x07markers\x12\x1a\n\x08duration\x18\r\x20\x01(\x04R\x08duration\x12%\n\
    \x08added_on\x18\xde\x02\x20\x01(\x0b2\t.DateTimeR\x07addedOnB\x08\n\x06\
    sourceJ\x9d\x0e\n\x06\x12\x04\0\0.\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \t\n\x02\x03\0\x12\x03\x02\0\x16\n\n\n\x02\x04\0\x12\x04\x04\0\n\x01\n\n\
    \n\x03\x04\0\x01\x12\x03\x04\x08\x0e\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\
    \x04\x14\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x04\n\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x05\x0b\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\
    \x12\x13\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x06\x04\x15\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03\x06\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x06\
    \x0b\x10\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\x13\x14\n\x0b\n\x04\
    \x04\0\x02\x02\x12\x03\x07\x04\x1b\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\
    \x07\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x07\x0b\x16\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03\x07\x19\x1a\n\x0b\n\x04\x04\0\x02\x03\x12\x03\
    \x08\x04\x20\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x08\x04\x0c\n\x0c\n\
    \x05\x04\0\x02\x03\x05\x12\x03\x08\r\x13\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x03\x08\x14\x1b\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x08\x1e\x1f\n\
    \x0b\n\x04\x04\0\x02\x04\x12\x03\t\x040\n\x0c\n\x05\x04\0\x02\x04\x04\
    \x12\x03\t\x04\x0c\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03\t\r\x1d\n\x0c\n\
    \x05\x04\0\x02\x04\x01\x12\x03\t\x1e+\n\x0c\n\x05\x04\0\x02\x04\x03\x12\
    \x03\t./\n\n\n\x02\x04\x01\x12\x04\x0c\0\x0f\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03\x0c\x08\x12\n\x0b\n\x04\x04\x01\x02\0\x12\x03\r\x04\x15\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03\r\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\r\x0b\x10\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\r\x13\x14\n\x0b\n\
    \x04\x04\x01\x02\x01\x12\x03\x0e\x04\x1b\n\x0c\n\x05\x04\x01\x02\x01\x05\
    \x12\x03\x0e\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0e\x0b\x16\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0e\x19\x1a\n\n\n\x02\x04\x02\x12\
    \x04\x11\0\x1b\x01\n\n\n\x03\x04\x02\x01\x12\x03\x11\x08\x15\n\x0c\n\x04\
    \x04\x02\x03\0\x12\x04\x12\x04\x15\x05\n\x0c\n\x05\x04\x02\x03\0\x01\x12\
    \x03\x12\x0c\x16\n\r\n\x06\x04\x02\x03\0\x02\0\x12\x03\x13\x08\x1a\n\x0e\
    \n\x07\x04\x02\x03\0\x02\0\x05\x12\x03\x13\x08\x0e\n\x0e\n\x07\x04\x02\
    \x03\0\x02\0\x01\x12\x03\x13\x0f\x15\n\x0e\n\x07\x04\x02\x03\0\x02\0\x03\
    \x12\x03\x13\x18\x19\n\r\n\x06\x04\x02\x03\0\x02\x01\x12\x03\x14\x08\x19\
    \n\x0e\n\x07\x04\x02\x03\0\x02\x01\x05\x12\x03\x14\x08\x0e\n\x0e\n\x07\
    \x04\x02\x03\0\x02\x01\x01\x12\x03\x14\x0f\x14\n\x0e\n\x07\x04\x02\x03\0\
    \x02\x01\x03\x12\x03\x14\x17\x18\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x16\
    \x04\x1e\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x16\x04\x0e\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03\x16\x0f\x19\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x16\x1c\x1d\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x17\x04\x19\n\x0c\n\
    \x05\x04\x02\x02\x01\x06\x12\x03\x17\x04\x0e\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03\x17\x0f\x14\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x17\x17\
    \x18\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x18\x04\x19\n\x0c\n\x05\x04\x02\
    \x02\x02\x06\x12\x03\x18\x04\x0e\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\
    \x18\x0f\x14\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x18\x17\x18\n\x0b\n\
    \x04\x04\x02\x02\x03\x12\x03\x19\x04\x19\n\x0c\n\x05\x04\x02\x02\x03\x05\
    \x12\x03\x19\x04\t\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x19\n\x14\n\
    \x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x19\x17\x18\n\x0b\n\x04\x04\x02\
    \x02\x04\x12\x03\x1a\x04\x19\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03\x1a\
    \x04\n\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03\x1a\x0b\x14\n\x0c\n\x05\
    \x04\x02\x02\x04\x03\x12\x03\x1a\x17\x18\n\n\n\x02\x04\x03\x12\x04\x1d\0\
    .\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1d\x08\r\n\x0b\n\x04\x04\x03\x02\0\
    \x12\x03\x1e\x04\x12\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x1e\x04\n\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1e\x0b\r\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03\x1e\x10\x11\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x1f\x04\x14\
    \n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x1f\x04\n\n\x0c\n\x05\x04\x03\
    \x02\x01\x01\x12\x03\x1f\x0b\x0f\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\
    \x1f\x12\x13\n\x0b\n\x04\x04\x03\x02\x02\x12\x03\x20\x04\x1f\n\x0c\n\x05\
    \x04\x03\x02\x02\x06\x12\x03\x20\x04\x11\n\x0c\n\x05\x04\x03\x02\x02\x01\
    \x12\x03\x20\x12\x1a\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\x20\x1d\x1e\
    \n\x0c\n\x04\x04\x03\x08\0\x12\x04!\x04%\x05\n\x0c\n\x05\x04\x03\x08\0\
    \x01\x12\x03!\n\x10\n\x0b\n\x04\x04\x03\x02\x03\x12\x03\"\x08\x1d\n\x0c\
    \n\x05\x04\x03\x02\x03\x05\x12\x03\"\x08\x0e\n\x0c\n\x05\x04\x03\x02\x03\
    \x01\x12\x03\"\x0f\x18\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03\"\x1b\x1c\
    \n\x0b\n\x04\x04\x03\x02\x04\x12\x03#\x08\x1e\n\x0c\n\x05\x04\x03\x02\
    \x04\x05\x12\x03#\x08\x0e\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\x03#\x0f\
    \x19\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03#\x1c\x1d\n\x0b\n\x04\x04\
    \x03\x02\x05\x12\x03$\x08\x1b\n\x0c\n\x05\x04\x03\x02\x05\x05\x12\x03$\
    \x08\x0e\n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x03$\x0f\x16\n\x0c\n\x05\
    \x04\x03\x02\x05\x03\x12\x03$\x19\x1a\n\x0b\n\x04\x04\x03\x02\x06\x12\
    \x03&\x04\x16\n\x0c\n\x05\x04\x03\x02\x06\x06\x12\x03&\x04\x08\n\x0c\n\
    \x05\x04\x03\x02\x06\x01\x12\x03&\t\x11\n\x0c\n\x05\x04\x03\x02\x06\x03\
    \x12\x03&\x14\x15\n\x0b\n\x04\x04\x03\x02\x07\x12\x03'\x04\x18\n\x0c\n\
    \x05\x04\x03\x02\x07\x05\x12\x03'\x04\n\n\x0c\n\x05\x04\x03\x02\x07\x01\
    \x12\x03'\x0b\x13\n\x0c\n\x05\x04\x03\x02\x07\x03\x12\x03'\x16\x17\n\x0b\
    \n\x04\x04\x03\x02\x08\x12\x03(\x04\"\n\x0c\n\x05\x04\x03\x02\x08\x04\
    \x12\x03(\x04\x0c\n\x0c\n\x05\x04\x03\x02\x08\x05\x12\x03(\r\x13\n\x0c\n\
    \x05\x04\x03\x02\x08\x01\x12\x03(\x14\x1d\n\x0c\n\x05\x04\x03\x02\x08\
    \x03\x12\x03(\x20!\n\x0b\n\x04\x04\x03\x02\t\x12\x03)\x04!\n\x0c\n\x05\
    \x04\x03\x02\t\x04\x12\x03)\x04\x0c\n\x0c\n\x05\x04\x03\x02\t\x05\x12\
    \x03)\r\x13\n\x0c\n\x05\x04\x03\x02\t\x01\x12\x03)\x14\x1b\n\x0c\n\x05\
    \x04\x03\x02\t\x03\x12\x03)\x1e\x20\n\x0b\n\x04\x04\x03\x02\n\x12\x03*\
    \x041\n\x0c\n\x05\x04\x03\x02\n\x04\x12\x03*\x04\x0c\n\x0c\n\x05\x04\x03\
    \x02\n\x06\x12\x03*\r\x1d\n\x0c\n\x05\x04\x03\x02\n\x01\x12\x03*\x1e+\n\
    \x0c\n\x05\x04\x03\x02\n\x03\x12\x03*.0\n\x0b\n\x04\x04\x03\x02\x0b\x12\
    \x03+\x04!\n\x0c\n\x05\x04\x03\x02\x0b\x04\x12\x03+\x04\x0c\n\x0c\n\x05\
    \x04\x03\x02\x0b\x06\x12\x03+\r\x13\n\x0c\n\x05\x04\x03\x02\x0b\x01\x12\
    \x03+\x14\x1b\n\x0c\n\x05\x04\x03\x02\x0b\x03\x12\x03+\x1e\x20\n\x0b\n\
    \x04\x04\x03\x02\x0c\x12\x03,\x04\x19\n\x0c\n\x05\x04\x03\x02\x0c\x05\
    \x12\x03,\x04\n\n\x0c\n\x05\x04\x03\x02\x0c\x01\x12\x03,\x0b\x13\n\x0c\n\
    \x05\x04\x03\x02\x0c\x03\x12\x03,\x16\x18\n\x0b\n\x04\x04\x03\x02\r\x12\
    \x03-\x04\x1c\n\x0c\n\x05\x04\x03\x02\r\x06\x12\x03-\x04\x0c\n\x0c\n\x05\
    \x04\x03\x02\r\x01\x12\x03-\r\x15\n\x0c\n\x05\x04\x03\x02\r\x03\x12\x03-\
    \x18\x1bb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
