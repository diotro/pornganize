// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `video.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Marker {
    // message fields
    pub time: u64,
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub tag_ids: ::protobuf::RepeatedField<::std::string::String>,
    pub custom_fields: ::protobuf::RepeatedField<super::common::CustomFieldValue>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Marker {
    fn default() -> &'a Marker {
        <Marker as ::protobuf::Message>::default_instance()
    }
}

impl Marker {
    pub fn new() -> Marker {
        ::std::default::Default::default()
    }

    // uint64 time = 1;


    pub fn get_time(&self) -> u64 {
        self.time
    }

    // string title = 2;


    pub fn get_title(&self) -> &str {
        &self.title
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }

    // repeated string tag_ids = 4;


    pub fn get_tag_ids(&self) -> &[::std::string::String] {
        &self.tag_ids
    }

    // repeated .CustomFieldValue custom_fields = 5;


    pub fn get_custom_fields(&self) -> &[super::common::CustomFieldValue] {
        &self.custom_fields
    }
}

impl ::protobuf::Message for Marker {
    fn is_initialized(&self) -> bool {
        for v in &self.custom_fields {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.time = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tag_ids)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.custom_fields)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.time != 0 {
            my_size += ::protobuf::rt::value_size(1, self.time, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        for value in &self.tag_ids {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        for value in &self.custom_fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.time != 0 {
            os.write_uint64(1, self.time)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        for v in &self.tag_ids {
            os.write_string(4, &v)?;
        };
        for v in &self.custom_fields {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Marker {
        Marker::new()
    }

    fn default_instance() -> &'static Marker {
        static instance: ::protobuf::rt::LazyV2<Marker> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Marker::new)
    }
}

impl ::protobuf::Clear for Marker {
    fn clear(&mut self) {
        self.time = 0;
        self.title.clear();
        self.description.clear();
        self.tag_ids.clear();
        self.custom_fields.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Marker {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct StreamInfo {
    // message fields
    pub codec: ::std::string::String,
    pub sample_rate: u64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamInfo {
    fn default() -> &'a StreamInfo {
        <StreamInfo as ::protobuf::Message>::default_instance()
    }
}

impl StreamInfo {
    pub fn new() -> StreamInfo {
        ::std::default::Default::default()
    }

    // string codec = 1;


    pub fn get_codec(&self) -> &str {
        &self.codec
    }

    // uint64 sample_rate = 2;


    pub fn get_sample_rate(&self) -> u64 {
        self.sample_rate
    }
}

impl ::protobuf::Message for StreamInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.codec)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sample_rate = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.codec.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.codec);
        }
        if self.sample_rate != 0 {
            my_size += ::protobuf::rt::value_size(2, self.sample_rate, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.codec.is_empty() {
            os.write_string(1, &self.codec)?;
        }
        if self.sample_rate != 0 {
            os.write_uint64(2, self.sample_rate)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamInfo {
        StreamInfo::new()
    }

    fn default_instance() -> &'static StreamInfo {
        static instance: ::protobuf::rt::LazyV2<StreamInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamInfo::new)
    }
}

impl ::protobuf::Clear for StreamInfo {
    fn clear(&mut self) {
        self.codec.clear();
        self.sample_rate = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct VideoMetadata {
    // message fields
    pub resolution: ::protobuf::SingularPtrField<VideoMetadata_Resolution>,
    pub audio: ::protobuf::SingularPtrField<StreamInfo>,
    pub video: ::protobuf::SingularPtrField<StreamInfo>,
    pub frame_rate: f32,
    pub file_size: u64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VideoMetadata {
    fn default() -> &'a VideoMetadata {
        <VideoMetadata as ::protobuf::Message>::default_instance()
    }
}

impl VideoMetadata {
    pub fn new() -> VideoMetadata {
        ::std::default::Default::default()
    }

    // .VideoMetadata.Resolution resolution = 1;


    pub fn get_resolution(&self) -> &VideoMetadata_Resolution {
        self.resolution.as_ref().unwrap_or_else(|| <VideoMetadata_Resolution as ::protobuf::Message>::default_instance())
    }

    // .StreamInfo audio = 2;


    pub fn get_audio(&self) -> &StreamInfo {
        self.audio.as_ref().unwrap_or_else(|| <StreamInfo as ::protobuf::Message>::default_instance())
    }

    // .StreamInfo video = 3;


    pub fn get_video(&self) -> &StreamInfo {
        self.video.as_ref().unwrap_or_else(|| <StreamInfo as ::protobuf::Message>::default_instance())
    }

    // float frame_rate = 4;


    pub fn get_frame_rate(&self) -> f32 {
        self.frame_rate
    }

    // uint64 file_size = 5;


    pub fn get_file_size(&self) -> u64 {
        self.file_size
    }
}

impl ::protobuf::Message for VideoMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.resolution {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.audio {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.video {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resolution)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.audio)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.video)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.frame_rate = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.file_size = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resolution.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.audio.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.video.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.frame_rate != 0. {
            my_size += 5;
        }
        if self.file_size != 0 {
            my_size += ::protobuf::rt::value_size(5, self.file_size, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resolution.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.audio.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.video.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.frame_rate != 0. {
            os.write_float(4, self.frame_rate)?;
        }
        if self.file_size != 0 {
            os.write_uint64(5, self.file_size)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VideoMetadata {
        VideoMetadata::new()
    }

    fn default_instance() -> &'static VideoMetadata {
        static instance: ::protobuf::rt::LazyV2<VideoMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VideoMetadata::new)
    }
}

impl ::protobuf::Clear for VideoMetadata {
    fn clear(&mut self) {
        self.resolution.clear();
        self.audio.clear();
        self.video.clear();
        self.frame_rate = 0.;
        self.file_size = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for VideoMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct VideoMetadata_Resolution {
    // message fields
    pub height: u32,
    pub width: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VideoMetadata_Resolution {
    fn default() -> &'a VideoMetadata_Resolution {
        <VideoMetadata_Resolution as ::protobuf::Message>::default_instance()
    }
}

impl VideoMetadata_Resolution {
    pub fn new() -> VideoMetadata_Resolution {
        ::std::default::Default::default()
    }

    // uint32 height = 1;


    pub fn get_height(&self) -> u32 {
        self.height
    }

    // uint32 width = 2;


    pub fn get_width(&self) -> u32 {
        self.width
    }
}

impl ::protobuf::Message for VideoMetadata_Resolution {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.height = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.width = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(1, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.width != 0 {
            my_size += ::protobuf::rt::value_size(2, self.width, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.height != 0 {
            os.write_uint32(1, self.height)?;
        }
        if self.width != 0 {
            os.write_uint32(2, self.width)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VideoMetadata_Resolution {
        VideoMetadata_Resolution::new()
    }

    fn default_instance() -> &'static VideoMetadata_Resolution {
        static instance: ::protobuf::rt::LazyV2<VideoMetadata_Resolution> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VideoMetadata_Resolution::new)
    }
}

impl ::protobuf::Clear for VideoMetadata_Resolution {
    fn clear(&mut self) {
        self.height = 0;
        self.width = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for VideoMetadata_Resolution {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Video {
    // message fields
    pub id: ::std::string::String,
    pub path: ::std::string::String,
    pub title: ::std::string::String,
    pub metadata: ::protobuf::SingularPtrField<VideoMetadata>,
    pub released: ::protobuf::SingularPtrField<super::common::Date>,
    pub language: ::std::string::String,
    pub actor_ids: ::protobuf::RepeatedField<::std::string::String>,
    pub tag_ids: ::protobuf::RepeatedField<::std::string::String>,
    pub custom_fields: ::protobuf::RepeatedField<super::common::CustomFieldValue>,
    pub markers: ::protobuf::RepeatedField<Marker>,
    pub duration: u64,
    pub added_on: ::protobuf::SingularPtrField<super::common::DateTime>,
    // message oneof groups
    pub source: ::std::option::Option<Video_oneof_source>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Video {
    fn default() -> &'a Video {
        <Video as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum Video_oneof_source {
    studio_id(::std::string::String),
    network_id(::std::string::String),
    site_id(::std::string::String),
}

impl Video {
    pub fn new() -> Video {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }

    // string path = 2;


    pub fn get_path(&self) -> &str {
        &self.path
    }

    // string title = 3;


    pub fn get_title(&self) -> &str {
        &self.title
    }

    // .VideoMetadata metadata = 4;


    pub fn get_metadata(&self) -> &VideoMetadata {
        self.metadata.as_ref().unwrap_or_else(|| <VideoMetadata as ::protobuf::Message>::default_instance())
    }

    // string studio_id = 5;


    pub fn get_studio_id(&self) -> &str {
        match self.source {
            ::std::option::Option::Some(Video_oneof_source::studio_id(ref v)) => v,
            _ => "",
        }
    }

    // string network_id = 6;


    pub fn get_network_id(&self) -> &str {
        match self.source {
            ::std::option::Option::Some(Video_oneof_source::network_id(ref v)) => v,
            _ => "",
        }
    }

    // string site_id = 7;


    pub fn get_site_id(&self) -> &str {
        match self.source {
            ::std::option::Option::Some(Video_oneof_source::site_id(ref v)) => v,
            _ => "",
        }
    }

    // .Date released = 8;


    pub fn get_released(&self) -> &super::common::Date {
        self.released.as_ref().unwrap_or_else(|| <super::common::Date as ::protobuf::Message>::default_instance())
    }

    // string language = 9;


    pub fn get_language(&self) -> &str {
        &self.language
    }

    // repeated string actor_ids = 10;


    pub fn get_actor_ids(&self) -> &[::std::string::String] {
        &self.actor_ids
    }

    // repeated string tag_ids = 11;


    pub fn get_tag_ids(&self) -> &[::std::string::String] {
        &self.tag_ids
    }

    // repeated .CustomFieldValue custom_fields = 12;


    pub fn get_custom_fields(&self) -> &[super::common::CustomFieldValue] {
        &self.custom_fields
    }

    // repeated .Marker markers = 13;


    pub fn get_markers(&self) -> &[Marker] {
        &self.markers
    }

    // uint64 duration = 14;


    pub fn get_duration(&self) -> u64 {
        self.duration
    }

    // .DateTime added_on = 350;


    pub fn get_added_on(&self) -> &super::common::DateTime {
        self.added_on.as_ref().unwrap_or_else(|| <super::common::DateTime as ::protobuf::Message>::default_instance())
    }
}

impl ::protobuf::Message for Video {
    fn is_initialized(&self) -> bool {
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.released {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.custom_fields {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.markers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.added_on {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.source = ::std::option::Option::Some(Video_oneof_source::studio_id(is.read_string()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.source = ::std::option::Option::Some(Video_oneof_source::network_id(is.read_string()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.source = ::std::option::Option::Some(Video_oneof_source::site_id(is.read_string()?));
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.released)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.language)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.actor_ids)?;
                },
                11 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tag_ids)?;
                },
                12 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.custom_fields)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.markers)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.duration = tmp;
                },
                350 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.added_on)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.path);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.title);
        }
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.released.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.language.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.language);
        }
        for value in &self.actor_ids {
            my_size += ::protobuf::rt::string_size(10, &value);
        };
        for value in &self.tag_ids {
            my_size += ::protobuf::rt::string_size(11, &value);
        };
        for value in &self.custom_fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.markers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.duration != 0 {
            my_size += ::protobuf::rt::value_size(14, self.duration, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.added_on.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.source {
            match v {
                &Video_oneof_source::studio_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(5, &v);
                },
                &Video_oneof_source::network_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(6, &v);
                },
                &Video_oneof_source::site_id(ref v) => {
                    my_size += ::protobuf::rt::string_size(7, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.path.is_empty() {
            os.write_string(2, &self.path)?;
        }
        if !self.title.is_empty() {
            os.write_string(3, &self.title)?;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.released.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.language.is_empty() {
            os.write_string(9, &self.language)?;
        }
        for v in &self.actor_ids {
            os.write_string(10, &v)?;
        };
        for v in &self.tag_ids {
            os.write_string(11, &v)?;
        };
        for v in &self.custom_fields {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.markers {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.duration != 0 {
            os.write_uint64(14, self.duration)?;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            os.write_tag(350, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.source {
            match v {
                &Video_oneof_source::studio_id(ref v) => {
                    os.write_string(5, v)?;
                },
                &Video_oneof_source::network_id(ref v) => {
                    os.write_string(6, v)?;
                },
                &Video_oneof_source::site_id(ref v) => {
                    os.write_string(7, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Video {
        Video::new()
    }

    fn default_instance() -> &'static Video {
        static instance: ::protobuf::rt::LazyV2<Video> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Video::new)
    }
}

impl ::protobuf::Clear for Video {
    fn clear(&mut self) {
        self.id.clear();
        self.path.clear();
        self.title.clear();
        self.metadata.clear();
        self.source = ::std::option::Option::None;
        self.source = ::std::option::Option::None;
        self.source = ::std::option::Option::None;
        self.released.clear();
        self.language.clear();
        self.actor_ids.clear();
        self.tag_ids.clear();
        self.custom_fields.clear();
        self.markers.clear();
        self.duration = 0;
        self.added_on.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Video {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}
