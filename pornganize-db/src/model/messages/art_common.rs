// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `art-common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct Character {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub description: ::std::string::String,
    pub sundry: ::protobuf::SingularPtrField<super::common::SundryThings>,
    pub added_on: ::protobuf::SingularPtrField<super::common::DateTime>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Character {
    fn default() -> &'a Character {
        <Character as ::protobuf::Message>::default_instance()
    }
}

impl Character {
    pub fn new() -> Character {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // .SundryThings sundry = 4;


    pub fn get_sundry(&self) -> &super::common::SundryThings {
        self.sundry.as_ref().unwrap_or_else(|| <super::common::SundryThings as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sundry(&mut self) {
        self.sundry.clear();
    }

    pub fn has_sundry(&self) -> bool {
        self.sundry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sundry(&mut self, v: super::common::SundryThings) {
        self.sundry = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sundry(&mut self) -> &mut super::common::SundryThings {
        if self.sundry.is_none() {
            self.sundry.set_default();
        }
        self.sundry.as_mut().unwrap()
    }

    // Take field
    pub fn take_sundry(&mut self) -> super::common::SundryThings {
        self.sundry.take().unwrap_or_else(|| super::common::SundryThings::new())
    }

    // .DateTime added_on = 350;


    pub fn get_added_on(&self) -> &super::common::DateTime {
        self.added_on.as_ref().unwrap_or_else(|| <super::common::DateTime as ::protobuf::Message>::default_instance())
    }
    pub fn clear_added_on(&mut self) {
        self.added_on.clear();
    }

    pub fn has_added_on(&self) -> bool {
        self.added_on.is_some()
    }

    // Param is passed by value, moved
    pub fn set_added_on(&mut self, v: super::common::DateTime) {
        self.added_on = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_added_on(&mut self) -> &mut super::common::DateTime {
        if self.added_on.is_none() {
            self.added_on.set_default();
        }
        self.added_on.as_mut().unwrap()
    }

    // Take field
    pub fn take_added_on(&mut self) -> super::common::DateTime {
        self.added_on.take().unwrap_or_else(|| super::common::DateTime::new())
    }
}

impl ::protobuf::Message for Character {
    fn is_initialized(&self) -> bool {
        for v in &self.sundry {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.added_on {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sundry)?;
                },
                350 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.added_on)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if let Some(ref v) = self.sundry.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if let Some(ref v) = self.sundry.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            os.write_tag(350, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Character {
        Character::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Character| { &m.id },
                |m: &mut Character| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Character| { &m.name },
                |m: &mut Character| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &Character| { &m.description },
                |m: &mut Character| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::SundryThings>>(
                "sundry",
                |m: &Character| { &m.sundry },
                |m: &mut Character| { &mut m.sundry },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::DateTime>>(
                "added_on",
                |m: &Character| { &m.added_on },
                |m: &mut Character| { &mut m.added_on },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Character>(
                "Character",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Character {
        static instance: ::protobuf::rt::LazyV2<Character> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Character::new)
    }
}

impl ::protobuf::Clear for Character {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.description.clear();
        self.sundry.clear();
        self.added_on.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Character {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Character {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Artist {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub aliases: ::protobuf::RepeatedField<::std::string::String>,
    pub name_patterns: ::protobuf::RepeatedField<::std::string::String>,
    pub gender: ::protobuf::SingularPtrField<super::common::Gender>,
    pub nationality: ::std::string::String,
    pub dob: ::protobuf::SingularPtrField<super::common::Date>,
    pub sundry: ::protobuf::SingularPtrField<super::common::SundryThings>,
    pub added_on: ::protobuf::SingularPtrField<super::common::DateTime>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Artist {
    fn default() -> &'a Artist {
        <Artist as ::protobuf::Message>::default_instance()
    }
}

impl Artist {
    pub fn new() -> Artist {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated string aliases = 3;


    pub fn get_aliases(&self) -> &[::std::string::String] {
        &self.aliases
    }
    pub fn clear_aliases(&mut self) {
        self.aliases.clear();
    }

    // Param is passed by value, moved
    pub fn set_aliases(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.aliases = v;
    }

    // Mutable pointer to the field.
    pub fn mut_aliases(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.aliases
    }

    // Take field
    pub fn take_aliases(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.aliases, ::protobuf::RepeatedField::new())
    }

    // repeated string name_patterns = 4;


    pub fn get_name_patterns(&self) -> &[::std::string::String] {
        &self.name_patterns
    }
    pub fn clear_name_patterns(&mut self) {
        self.name_patterns.clear();
    }

    // Param is passed by value, moved
    pub fn set_name_patterns(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.name_patterns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_name_patterns(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.name_patterns
    }

    // Take field
    pub fn take_name_patterns(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.name_patterns, ::protobuf::RepeatedField::new())
    }

    // .Gender gender = 5;


    pub fn get_gender(&self) -> &super::common::Gender {
        self.gender.as_ref().unwrap_or_else(|| <super::common::Gender as ::protobuf::Message>::default_instance())
    }
    pub fn clear_gender(&mut self) {
        self.gender.clear();
    }

    pub fn has_gender(&self) -> bool {
        self.gender.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gender(&mut self, v: super::common::Gender) {
        self.gender = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gender(&mut self) -> &mut super::common::Gender {
        if self.gender.is_none() {
            self.gender.set_default();
        }
        self.gender.as_mut().unwrap()
    }

    // Take field
    pub fn take_gender(&mut self) -> super::common::Gender {
        self.gender.take().unwrap_or_else(|| super::common::Gender::new())
    }

    // string nationality = 7;


    pub fn get_nationality(&self) -> &str {
        &self.nationality
    }
    pub fn clear_nationality(&mut self) {
        self.nationality.clear();
    }

    // Param is passed by value, moved
    pub fn set_nationality(&mut self, v: ::std::string::String) {
        self.nationality = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nationality(&mut self) -> &mut ::std::string::String {
        &mut self.nationality
    }

    // Take field
    pub fn take_nationality(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nationality, ::std::string::String::new())
    }

    // .Date dob = 8;


    pub fn get_dob(&self) -> &super::common::Date {
        self.dob.as_ref().unwrap_or_else(|| <super::common::Date as ::protobuf::Message>::default_instance())
    }
    pub fn clear_dob(&mut self) {
        self.dob.clear();
    }

    pub fn has_dob(&self) -> bool {
        self.dob.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dob(&mut self, v: super::common::Date) {
        self.dob = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dob(&mut self) -> &mut super::common::Date {
        if self.dob.is_none() {
            self.dob.set_default();
        }
        self.dob.as_mut().unwrap()
    }

    // Take field
    pub fn take_dob(&mut self) -> super::common::Date {
        self.dob.take().unwrap_or_else(|| super::common::Date::new())
    }

    // .SundryThings sundry = 9;


    pub fn get_sundry(&self) -> &super::common::SundryThings {
        self.sundry.as_ref().unwrap_or_else(|| <super::common::SundryThings as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sundry(&mut self) {
        self.sundry.clear();
    }

    pub fn has_sundry(&self) -> bool {
        self.sundry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sundry(&mut self, v: super::common::SundryThings) {
        self.sundry = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sundry(&mut self) -> &mut super::common::SundryThings {
        if self.sundry.is_none() {
            self.sundry.set_default();
        }
        self.sundry.as_mut().unwrap()
    }

    // Take field
    pub fn take_sundry(&mut self) -> super::common::SundryThings {
        self.sundry.take().unwrap_or_else(|| super::common::SundryThings::new())
    }

    // .DateTime added_on = 350;


    pub fn get_added_on(&self) -> &super::common::DateTime {
        self.added_on.as_ref().unwrap_or_else(|| <super::common::DateTime as ::protobuf::Message>::default_instance())
    }
    pub fn clear_added_on(&mut self) {
        self.added_on.clear();
    }

    pub fn has_added_on(&self) -> bool {
        self.added_on.is_some()
    }

    // Param is passed by value, moved
    pub fn set_added_on(&mut self, v: super::common::DateTime) {
        self.added_on = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_added_on(&mut self) -> &mut super::common::DateTime {
        if self.added_on.is_none() {
            self.added_on.set_default();
        }
        self.added_on.as_mut().unwrap()
    }

    // Take field
    pub fn take_added_on(&mut self) -> super::common::DateTime {
        self.added_on.take().unwrap_or_else(|| super::common::DateTime::new())
    }
}

impl ::protobuf::Message for Artist {
    fn is_initialized(&self) -> bool {
        for v in &self.gender {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.dob {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sundry {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.added_on {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.aliases)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.name_patterns)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gender)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nationality)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dob)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sundry)?;
                },
                350 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.added_on)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        for value in &self.aliases {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.name_patterns {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if let Some(ref v) = self.gender.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.nationality.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.nationality);
        }
        if let Some(ref v) = self.dob.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.sundry.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        for v in &self.aliases {
            os.write_string(3, &v)?;
        };
        for v in &self.name_patterns {
            os.write_string(4, &v)?;
        };
        if let Some(ref v) = self.gender.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.nationality.is_empty() {
            os.write_string(7, &self.nationality)?;
        }
        if let Some(ref v) = self.dob.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.sundry.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.added_on.as_ref() {
            os.write_tag(350, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Artist {
        Artist::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Artist| { &m.id },
                |m: &mut Artist| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Artist| { &m.name },
                |m: &mut Artist| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "aliases",
                |m: &Artist| { &m.aliases },
                |m: &mut Artist| { &mut m.aliases },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name_patterns",
                |m: &Artist| { &m.name_patterns },
                |m: &mut Artist| { &mut m.name_patterns },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Gender>>(
                "gender",
                |m: &Artist| { &m.gender },
                |m: &mut Artist| { &mut m.gender },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nationality",
                |m: &Artist| { &m.nationality },
                |m: &mut Artist| { &mut m.nationality },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Date>>(
                "dob",
                |m: &Artist| { &m.dob },
                |m: &mut Artist| { &mut m.dob },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::SundryThings>>(
                "sundry",
                |m: &Artist| { &m.sundry },
                |m: &mut Artist| { &mut m.sundry },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::DateTime>>(
                "added_on",
                |m: &Artist| { &m.added_on },
                |m: &mut Artist| { &mut m.added_on },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Artist>(
                "Artist",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Artist {
        static instance: ::protobuf::rt::LazyV2<Artist> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Artist::new)
    }
}

impl ::protobuf::Clear for Artist {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.aliases.clear();
        self.name_patterns.clear();
        self.gender.clear();
        self.nationality.clear();
        self.dob.clear();
        self.sundry.clear();
        self.added_on.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Artist {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Artist {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10art-common.proto\x1a\x0ccommon.proto\"\x9f\x01\n\tCharacter\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\x20\x01\
    (\tR\x04name\x12\x20\n\x0bdescription\x18\x03\x20\x01(\tR\x0bdescription\
    \x12%\n\x06sundry\x18\x04\x20\x01(\x0b2\r.SundryThingsR\x06sundry\x12%\n\
    \x08added_on\x18\xde\x02\x20\x01(\x0b2\t.DateTimeR\x07addedOn\"\x95\x02\
    \n\x06Artist\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04name\
    \x18\x02\x20\x01(\tR\x04name\x12\x18\n\x07aliases\x18\x03\x20\x03(\tR\
    \x07aliases\x12#\n\rname_patterns\x18\x04\x20\x03(\tR\x0cnamePatterns\
    \x12\x1f\n\x06gender\x18\x05\x20\x01(\x0b2\x07.GenderR\x06gender\x12\x20\
    \n\x0bnationality\x18\x07\x20\x01(\tR\x0bnationality\x12\x17\n\x03dob\
    \x18\x08\x20\x01(\x0b2\x05.DateR\x03dob\x12%\n\x06sundry\x18\t\x20\x01(\
    \x0b2\r.SundryThingsR\x06sundry\x12%\n\x08added_on\x18\xde\x02\x20\x01(\
    \x0b2\t.DateTimeR\x07addedOnJ\xeb\x06\n\x06\x12\x04\0\0\x16\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\0\x16\n\n\n\x02\x04\
    \0\x12\x04\x04\0\n\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x11\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x05\x04\x12\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x05\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x0b\r\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03\x05\x10\x11\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x06\
    \x04\x14\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\x04\n\n\x0c\n\x05\x04\
    \0\x02\x01\x01\x12\x03\x06\x0b\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x06\x12\x13\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x07\x04\x1b\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x03\x07\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03\x07\x0b\x16\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x07\x19\x1a\n\x0b\
    \n\x04\x04\0\x02\x03\x12\x03\x08\x04\x1c\n\x0c\n\x05\x04\0\x02\x03\x06\
    \x12\x03\x08\x04\x10\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x08\x11\x17\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x08\x1a\x1b\n\x0b\n\x04\x04\0\x02\
    \x04\x12\x03\t\x04\x1c\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03\t\x04\x0c\n\
    \x0c\n\x05\x04\0\x02\x04\x01\x12\x03\t\r\x15\n\x0c\n\x05\x04\0\x02\x04\
    \x03\x12\x03\t\x18\x1b\n\n\n\x02\x04\x01\x12\x04\x0c\0\x16\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03\x0c\x08\x0e\n\x0b\n\x04\x04\x01\x02\0\x12\x03\r\x04\
    \x12\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\r\x04\n\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03\r\x0b\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\r\x10\
    \x11\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0e\x04\x14\n\x0c\n\x05\x04\x01\
    \x02\x01\x05\x12\x03\x0e\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\
    \x0e\x0b\x0f\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0e\x12\x13\n\x0b\n\
    \x04\x04\x01\x02\x02\x12\x03\x0f\x04\x20\n\x0c\n\x05\x04\x01\x02\x02\x04\
    \x12\x03\x0f\x04\x0c\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x0f\r\x13\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x0f\x14\x1b\n\x0c\n\x05\x04\x01\
    \x02\x02\x03\x12\x03\x0f\x1e\x1f\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x10\
    \x04&\n\x0c\n\x05\x04\x01\x02\x03\x04\x12\x03\x10\x04\x0c\n\x0c\n\x05\
    \x04\x01\x02\x03\x05\x12\x03\x10\r\x13\n\x0c\n\x05\x04\x01\x02\x03\x01\
    \x12\x03\x10\x14!\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x10$%\n\x0b\n\
    \x04\x04\x01\x02\x04\x12\x03\x11\x04\x16\n\x0c\n\x05\x04\x01\x02\x04\x06\
    \x12\x03\x11\x04\n\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x11\x0b\x11\n\
    \x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x11\x14\x15\n\x0b\n\x04\x04\x01\
    \x02\x05\x12\x03\x12\x04\x1b\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03\x12\
    \x04\n\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x12\x0b\x16\n\x0c\n\x05\
    \x04\x01\x02\x05\x03\x12\x03\x12\x19\x1a\n\x0b\n\x04\x04\x01\x02\x06\x12\
    \x03\x13\x04\x11\n\x0c\n\x05\x04\x01\x02\x06\x06\x12\x03\x13\x04\x08\n\
    \x0c\n\x05\x04\x01\x02\x06\x01\x12\x03\x13\t\x0c\n\x0c\n\x05\x04\x01\x02\
    \x06\x03\x12\x03\x13\x0f\x10\n\x0b\n\x04\x04\x01\x02\x07\x12\x03\x14\x04\
    \x1c\n\x0c\n\x05\x04\x01\x02\x07\x06\x12\x03\x14\x04\x10\n\x0c\n\x05\x04\
    \x01\x02\x07\x01\x12\x03\x14\x11\x17\n\x0c\n\x05\x04\x01\x02\x07\x03\x12\
    \x03\x14\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x08\x12\x03\x15\x04\x1c\n\x0c\n\
    \x05\x04\x01\x02\x08\x06\x12\x03\x15\x04\x0c\n\x0c\n\x05\x04\x01\x02\x08\
    \x01\x12\x03\x15\r\x15\n\x0c\n\x05\x04\x01\x02\x08\x03\x12\x03\x15\x18\
    \x1bb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
